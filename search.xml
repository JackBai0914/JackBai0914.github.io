<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>寒假计划</title>
    <url>/2020-12-05-Winter-Plan.html</url>
    <content><![CDATA[<p>大一寒假学习计划。</p>
<a id="more"></a>
<h2 id="寒假计划"><a href="#寒假计划" class="headerlink" title="寒假计划"></a>寒假计划</h2><h3 id="自由时间"><a href="#自由时间" class="headerlink" title="自由时间"></a>自由时间</h3><ul>
<li>12.5 - 1.17，44天。</li>
<li>12.14-12.18 实习</li>
</ul>
<h3 id="想做的事-draft"><a href="#想做的事-draft" class="headerlink" title="想做的事-draft"></a>想做的事-draft</h3><ul>
<li><strong>二刷Functional Programming</strong>。搞懂细节，non-trivial repetition，为之后fp相关的课程打好基础。</li>
<li>学习<strong>Web相关的1-2门课程</strong>。你向往全栈的能力。</li>
<li>真正完成一门<strong>AI的通识课</strong>，再完成一门<strong>AI的进阶课</strong>（可以是CV）。</li>
<li><strong>数学</strong>，让你十分纠结。你知道自己最强烈的兴趣并不在数学上，但是你也清楚数学的重要性，憧憬数学的抽象性和“世外桃源”的美。至关重要的是，不能被身边less-thoughtful的人给带了节奏。你知道他们的层次，你不希望逐渐变得和他们一样。看看Bazinga吧，看看tau~，同龄人定心钻研的样子就是对你最大的刺激和鼓励。<strong>假期按照Bazinga推荐的方法学习Analysis和Linear Algebra，用Rudin和Done Right两本教材，继续建立知识体系；同时，尽量去补calculus和geo的课。</strong></li>
<li>阅读<strong>Teach yourself physics</strong>, 你向往的方向。</li>
<li>读《计算中的上帝》</li>
<li><p>预习下学期的课程。</p>
</li>
<li><p>编程竞赛 — 上红名</p>
</li>
<li><p>实习 — 作出有意义的结果</p>
</li>
</ul>
<h3 id="事务规划-tabled"><a href="#事务规划-tabled" class="headerlink" title="事务规划-tabled"></a>事务规划-tabled</h3><ul>
<li>《Intro to FP》，11节</li>
<li>《Deep Learning》, 15 weeks (3 weeks); 进阶AI课程未知</li>
<li>《Done Right》，《Baby Rudin》上课&amp;做题</li>
<li>《Teach Yourself Physics》前两周读完</li>
<li><p>做下学期算法的sheet？</p>
</li>
<li><p>CyberSecurity Specialisation 70 hours</p>
</li>
<li>Full-Stack Web Development with React Specialisation 150 hours</li>
</ul>
<h3 id="时间规划：两个阶段"><a href="#时间规划：两个阶段" class="headerlink" title="时间规划：两个阶段"></a>时间规划：两个阶段</h3><h4 id="Part1-函数式编程巩固，实习，人工智能通识，数理基础"><a href="#Part1-函数式编程巩固，实习，人工智能通识，数理基础" class="headerlink" title="Part1: 函数式编程巩固，实习，人工智能通识，数理基础"></a>Part1: 函数式编程巩固，实习，人工智能通识，数理基础</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">每天任务</th>
<th style="text-align:center">exp时间</th>
<th style="text-align:center">强度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读《Intro to FP》写报告，2天一节。认真写报告，理解内涵，做足量的练习题</td>
<td style="text-align:center">3h</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">《Deep Learning》网课</td>
<td style="text-align:center">5h</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">一天三节MIT数学课。建立微积分框架，巩固线性代数的形象理解</td>
<td style="text-align:center">2h</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">《Teach Yourself Physics》</td>
<td style="text-align:center">1h</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">锻炼</td>
<td style="text-align:center">1h</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">和爸爸妈妈通话</td>
<td style="text-align:center">0.5h</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">吃饭</td>
<td style="text-align:center">2h</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">睡觉</td>
<td style="text-align:center">8h</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Part2-课程预习，数理进阶，全栈技能"><a href="#Part2-课程预习，数理进阶，全栈技能" class="headerlink" title="Part2: 课程预习，数理进阶，全栈技能"></a>Part2: 课程预习，数理进阶，全栈技能</h4><p>待更新</p>
<h3 id="节奏-amp-注意事项"><a href="#节奏-amp-注意事项" class="headerlink" title="节奏 &amp; 注意事项"></a>节奏 &amp; 注意事项</h3><ul>
<li><p>保持睡眠至关重要。</p>
</li>
<li><p>每天时间可浮动，每周一总结；平均学习时间不能少于11h/天。</p>
</li>
<li><p>一定注意区分高强度/中强度的学习，高效率的用大脑；就像长跑。</p>
</li>
<li>别做无谓的，放纵的，消耗精力的事情了。</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>Dream to Red</title>
    <url>/2020-04-12-Codeforces-Recording.html</url>
    <content><![CDATA[<p>CF上红不难，难的是在心中再次点燃火焰。开始吧。</p>
<a id="more"></a>
<p>Initial Rating: <strong>2161</strong></p>
<h3 id="2020-4-12-CR633-Div-1"><a href="#2020-4-12-CR633-Div-1" class="headerlink" title="2020.4.12 CR633 Div 1"></a>2020.4.12 CR633 Div 1</h3><ul>
<li>Ranked 534 out of 1392</li>
<li>Rating: (+1) 2161 -&gt; <strong>2162</strong> </li>
<li>总结<ul>
<li>从过程上看，发挥中等。因思维生疏而导致想A (观察结论题) 和B (图论思维题)的时间过长；因手指生疏而导致写A错了三次 (本质也是没想清)，写C (找规律题)写得很复杂。</li>
<li>等级分的变化比较让我感到安慰。这说明，我只要正常发挥，稳定的做出该做的(三道)题，等级分是不会下降的。不过想要上红，一是要增加思考速度+手速，二是要积极思考D。<strong>不做出D，是很难上红的。</strong></li>
</ul>
</li>
</ul>
<h3 id="2020-4-15-CR635-Div-1"><a href="#2020-4-15-CR635-Div-1" class="headerlink" title="2020.4.15 CR635 Div 1"></a>2020.4.15 CR635 Div 1</h3><ul>
<li>Ranked 1338 out of 2619</li>
<li>Rating: (-106) 2162 -&gt; <strong>2056</strong> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">意料之中的难受。</span><br><span class="line">也是久违的。</span><br><span class="line">你的思路十分闭塞。思考问题的时候，已经不再能抓住本质。</span><br><span class="line"></span><br><span class="line">可我还能看得见光。</span><br></pre></td></tr></table></figure>
<p>我会好好睡觉，戒掉使人变得愚钝的恶习，我会重新开始思考。</p>
<p>这一切都还来得及。<strong>我不会放弃。</strong></p>
<h3 id="2020-10-10-CGR-11"><a href="#2020-10-10-CGR-11" class="headerlink" title="2020.10.10 CGR 11"></a>2020.10.10 CGR 11</h3><ul>
<li>Ranked 1338 out of 2619</li>
<li>Rating: (-58) 2293 -&gt; <strong>2235</strong> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">醉里挑灯看剑，梦回吹角连营。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Competitions</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>LostLove</title>
    <url>/2021-07-07-LostLove.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4034642d68ddbf598040f8ef6cea778ef4ff41c127346eae7b6b9a8eb821509f">10d79030e8222445804370796b90fca15eb460b4777e0c10dfdebf246cac703b3edd272aec57572e614aa693bdd61c7f1d526acb00fbcc2653824dcddc4c8b7b0771a0d20230ea062d4516f6c5172886fb39380819f6457fd537b445f5187014804b8ece215facc272a048f8121a34a95e974c4f7aa6b20710d2ee76d90932ea10fc04c701a280c64eaf6151f8c468cda4968a9985535c4a5eb1ac58e0cc348891aa8c3a65b4313d58c95e3b94f0991d623132b7dbe526db8da20085497c90bdb812e967def59273f6a46453903bd32b0a39436c6853e4c27adfc3c8c0957fb463af9abc77fab931041e953307f98af2b835b244073c1324a930eefbe9279911531ce7d04bbe2d08095c0568becf2896ec7fc2546cc7ae79bf81470093845b81381a5835925ded0ac9dd62df74d541fcda66f2698152d5b011dc4b89433a7869098ae2fffcae1af0e43ca4322ff5d2bb771915d74ebece23b6c56499cbb3324a92df8a8b19cc81970135af6309eff53dbcf288ed8188819b1bbcdedd916638f43b4ad385ad7669e86bc8832d657a311f27c8bf97ebb8702eddebf01c4795d6b331ccfcee1ab2760724a597b5503973c7e6e9e5c05c11cb1c4d91c8b489e88507baa2ba6e4040defea2ed52b12256cf41250060ded551d7bd56795756e7133a463b476f3c1393d73b9fe440e1c1bf67657328190323be2209e40171111df0f308991fce39f5cce7fcbccf7acb078db93f8ae0d939f1a53ef277a85fa774304b9fd90ec5a95b2bfe8ab2fdb77f09245aca2548550b95c7467bd6b6e12ddb3b76a134e6234911a9a839614db58f800e819970b2aa034ca19675a517245ae564a854356db4998193218a990d530e97e70f2ef022c2c99a2889bc5d79cf69a3e6f4fa323c2ece4ad5f512ad1ee4f55745f216ed05fa0beaa6d314fcbf40529a0e00e893043735afca0a2b2d06700f4f1c6b6bb282a39b882829f1e003be699ec329f8e4da641cee599e05716ef1c24e32b6dbe6899298c01a857afde17e6f03a41e2fa02582d4959f70ecc3223e0e5e012cf5f0e45cbff048171ea0a890ffbdedbc6505b001c36641d89fcf019ed4ef92e3948c1c5ba6341b274daa83670424512b726d7ad37845835df03a002f5ec7e03099c7b071c87a93ab123b360137e4516eb07321a3de60c33d218ba01f3cd4cad515f95045caf9cb950cb317ad771733c49e190c233b9fb9ed59d7e19cee4020bda1c74a7b0daba74f76b353156c4841726414e09426ce2fc40a96eb4fa4ea5b585a2111b2c0d051db9533295e23f572d2a9e5987993ec2183f45b15ba5941a063eaf10bf7ac523895a4325f129ea9c88becdb345bfc7782dbdb8e6edf221f62db4bc525e42d53377383f804edb1a2ad04b04ebd533f6bd06e347b3c80884f410d678b81b828e057edb9dd1e8308833fa94bed56b52fb63f11704908581ccfb3c1c428562fee08cd7c5bc40c0b66d6c6f44917cb9dc327459c812f6df6b020eadc313c641542c6e821a9a4374a0f371fa4e476b9fe03e39fd7b23cd5bdc8c0299b304cac86a11c56f6c91e127d7ffe9b3b2f5bffedd4746181d1f34f650f057700ffd27a7d6eab5da2c54fd60417988954ac026d35e8f0d3a5e5b794dee518e5e4cb4398d4e3717e38cf9943114ff9d0c9cf40d1584fca7bc4d399266f7d551a8766d26644a8a0930b7347df6ab0a323d5eab440c37335c3efbfa2ea28405c96d63b506bbf52a76bde6657026bdcb5cd23b17898c112c87f63ae7364b88cc43665ae55b427cf8f9e9924ef8fdd0b7a75da7f602b4a5d7cb5b1ea3f56eeb467fbe6988673b174090a947913dfb7d784c1d84880ecc65549db41ac7bba97cc356ac33373a382944ce44623d853220dce7bd1d392097f14f996393897ee0b35e8cae6b4ea5521a49ad39092ea967ab16b161030c767238e1da38e4e400162cb2819c6dda3ae1e02c90f188486b784638decce6f61dd50a34a9fb5403d09a0bae94e295b0f11b351a640da3ce78740b0bbff915f631af88bd05d3d3752870d606a2175024f6fddc30ec430dd1e2d63d2fd7650769ae7eca80ed5376b94b93e9da608f415ac4f928246a58e15b0ddadab729a0c647d90cf3699733631946ac44dc7ca37763f08ada9e58caff784dbb823db4c453f82608a6e9832f89c745220f1bb2065c4a9f07748f3e1a0e7f73e6401951f2f49a3c1eba0ddcf7a89ef94bf560727cabc4e0f3e05fff13f9dd0ad95324bdd65ae43d11ba082ba908520d04859575dbd54aa6eb0da816aef2989a8970a2161a4ea1e3023cf57b0aefe934325b5154b826a3f9668b2ffc6cc02284aef66ce0e130b16bd487eb4287105a760432ebc9a479810d1274cf8e284a5980ca8f84deedf418ead966a58467e24d82aad1c51f00e75dcbd887c669aa2013b1a11e7ebcfa4c4546312cd50648478d990bde4bd42a718c698ae16587cac50aefe7c16f464f9652f11280115cc14f8d18791982f797802f195bd9d92808b8bca9b50803358e0459c892ce7fae37afaa63e5b8d5b05e5d60dfd7ad82416abed04684c0fd24e409a82847aba1719242823b22197e8a87722f53b4b4815bce4c82e2986121316644f9e2e7803d6168a7b4d3e7fe50a4b16b905d155f721b0c8aa327409e2f1bef1e594f80f76888bb4afd67165444e62aab2b974a972253b5f113560d127bab2e3fc0ed292ed527822feeeb980ed14c6ada838999d9fdf3a9ecf40c7b660558de74f77fe5081705055801ab54dfb273288e89509750ab1a7ce95f228d75505b971fa9b27fe99b888008b67626a245ded6e77eb6c59aee41e25446df267e9d7e9451a3a5dea302b50de66e2428b9fab33a72da4b96a9d4efbac65e37aed74682d6318d1d18196561591ee3a0ca85c0652de698bf33b7e9abf7ebad157e16b59195d62efe07180355d79a7c4b1589c869b49ab55dbfda5af8c25429d46875b525fc73b8ed2f46b1c017bdd9a71ca79dffd0bc9d5c7b903372a651392cb0293d6e741a7fb4c3126384413d44d4730351603946049bab0ee77ef9d07a848b2c81b54816a086ae4a2a635e138559cc3dc80d1f64d7b7f25c5959e9fb145dbbf9da7e3dbeffe20bcc06117f41bc6a6368c42e37091d71e434dd51f6de401011a3c5cfcbf484c0d97976e4bc1fe4ad969b064b0add701f834f7889edb46ad3c95acd69a2baf5153481b6d164de889885e749306b0293e1428859930c01541382162b2637753c57038d8aa6ff26edd48b5ebb8fb62bcb0d383afdffd950e9b5ce975aa0a4d09262de4fd91ed480aaf7dd40382cf3eaab173e92d8867dba3587a493eeb51153ae85485cb627106a621d99bc1efc4eb523834bab60177a6c2e529353bf93753b323984bcb2930f73a28ca995f3b75002d5f27b8cb7bfb1c9246bbce76cdfbd8e0baecf4ad819218b4e48cfa74f7b98ac7fdeb14ff0743b7ba3e824dae494a3822aab77b08dbf2881caa0b08aec5123f4a1af6a52baf15fd3bc9049a08e30ee08d9734f3304cc23a0a6e19e233cff423a1db2c53afc3d7272fd58596f25d67639ba45672dba3c8ff77e186b4bea70c51afbda3756c57eab9a625954cf1b5abf977c71632ab613172763dd11a4ad2b0a9d8e2786536f76e500ee33a0b5ac2103899f15918540b8913dfa50c4e92d856e6cb169adee27bfa3c5816d0c97a1ff8f9a42ef8e74eac7fd4150ed7a71c512aefa6e1a63ec877ba5df1d3f5416ac194f28d438edcee0c4ff197774f1e6ec6505eede60601900e15bed0388517c566b722e4a59519b21e9ff0ede69da0eb546ecaef40247560084106d99d93a91445e17ed2ffcdffc77a71bd6fb32cd0875fc98624d4fd1884eb83f4ec35bfab54ae712bba0c5b525256a39be95817727bbf8794ecff1f791f2390998e90233513cd3eb3839632b85d4625eda7adbf69892a54e3fdada5e9ab44fc0f8412ee35bdc8c3311dedff664e6cb80f822786553eb51cb028dc5d52c6d079645ebb15e551a34c27de221998589e1cc97ba635d3902a3851a7c7990e73dbcbd908c12a52de369cf37b66511f6fe142559cabf51d4329539e1c04261ea9723f9531fc8cf502373ad45f7a42ac81c93c41276d44166b111fd4057efb9e61827bd9161d1e82e420982066d29d915c01c29bd34c5c242d016144c63c261146f4950a278004135248235aca004a6709ea610d62d9f045d3819aa8e73dffbb9d5d7c861d8456e165b20fda43519a4dd4000474bfa039c95908d5af2b0f4bd8591df0b5e12d456b6064e871a48df93b85f97f53dee4e3b1029ab7203cbc22266b4fe8484935750f7811dfe31dd5f46c9fa41e449a5e654140702745f103fe1273660fdef13adb71621fb3a949a78e18ddfefde8ee05cf650960d9ca318b7595d2b1714ed9647c89f54b64b24fc747f0258476ef7357b0e06c9973e286370942e6afa1eb3c6a850ebe83e9255586a7d03a9cd568115dffc998c2695fdc8178280cb19825e664c0cc205ca5aab3687901d012fd9db074c1aecee7b0bdb53ab730f04cc8ffd424d0b462adb7adc341b379487bf45882a34c52807e13e92357c0b4449e19066bb36aa51e8b5791487dd18b50bad1669d6709932afc2c59ee9a0fe5eb713740db512441f9fe59f64a9daa4fc77ae4484327e528505d4cf4289430463417822db3da755f27789571ad904b5f4326303ec172c11bff0a32108c02fd82209187bf922f55ff71241ea00da55dbe5139b65b21bd3a329eb48670238bfaebd61247cd28ae00db8b56ebe95946005c45c00cb4e646ffe060d14c459c8cfec107e4701959971febff0080746bef68f1217cec6bd07528d8510942a1d3243d60830c293d1bac1a62b57f4edd1b8f559616e0e1669aee66a1cecb862edf465fbec5f94451409d69f7ee788037021831a401d46a076a47f2e6d6e662b3f637a685a2655567fb6085b90e286c10d41f51762149200c14bf444497c56042ca72de197da9d4977d8688903e1cd69f239904731d215a14967820083389476041a371178d9c599210ae98ceb4764a2926e8ed604979056d279774833004c9ed60a16dc1fa6ea6374b19ab5fc13e6b9d92</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>FirstLove</tag>
      </tags>
  </entry>
  <entry>
    <title>LibSeatGrabber -- WebDriver, TOTP, crontab初探</title>
    <url>/2021-05-04-LibSeatGrabber.html</url>
    <content><![CDATA[<p>花了不到十个小时的时间，实现了一个自动抢图书馆座位的程序，探索了自动化访问网络的工具，基于时间的一次性密码算法，以及mac电脑中控制程序周期运行的API。下面做知识总结和问题记录。</p>
<a id="more"></a>
<h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><h3 id="Selenium-Webdriver"><a href="#Selenium-Webdriver" class="headerlink" title="Selenium Webdriver"></a>Selenium Webdriver</h3><ul>
<li><p>Selenium是最广泛使用的开源Web UI自动化测试套件之一，支持跨不同浏览器，平台和编程语言的自动化。</p>
</li>
<li><p>值得一提的是，Selenium借助Chrome作为媒介，读取HTML文件，并上传操作。它似乎并没有直接实现与服务器的交互，这导致它在自动化的过程中还是避不开Chrome的渲染等操作，有些浪费时间。</p>
</li>
</ul>
<h3 id="Time-based-One-time-Password-algorithm"><a href="#Time-based-One-time-Password-algorithm" class="headerlink" title="Time-based One-time Password algorithm"></a>Time-based One-time Password algorithm</h3><ul>
<li>Double Authentication使用的密码生成方法，一般需要用手机软件扫描网页，然后每次从实际上获取单次有效的密码。</li>
<li>只要拿到了secret，用一个简单的哈希方法就可以模拟手机软件，生成对应的password…</li>
<li>Microsoft把secret明文直接写在了QR code中。。。</li>
<li><a href="https://github.com/pyauth/pyotp">A Python package </a>模拟TOTP Hashing algorithm:</li>
</ul>
<h3 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h3><ul>
<li>一种轻量级的终端脚本，可以做到基于时间的任务管理。<ul>
<li>crontab -e, -l</li>
</ul>
</li>
<li><a href="https://crontab.guru/">crontab语法辅助网页</a></li>
<li>用crontab运行程序时，所在的地址位置比较奇怪，是在总根目录，而不是用户的根目录。</li>
</ul>
<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ul>
<li>将chromedriver放进PATH总是失败</li>
<li>增加程序的健壮性，没进行一步网页操作，多让程序sleep一些时间</li>
<li>设计出有针对性的交互方式<ul>
<li>dreamSeats.txt</li>
<li>各种log都不能少</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces-ECR102</title>
    <url>/2021-01-14-Codeforces-ECR102.html</url>
    <content><![CDATA[<h2 id="模型总结"><a href="#模型总结" class="headerlink" title="模型总结"></a>模型总结</h2><ol>
<li>(D) 对于Operation $+$, 若其满足 $\forall a, b, c, a + c = a + b + c - b$ (即存在逆元且满足交换律)，则可以考虑<strong>前缀和</strong>维护信息。</li>
<li>(E) 最优化问题“消除restriction”的方法：<ol>
<li>放宽限制 (min/max-&gt;all)</li>
<li>发现generalize的问题的最优答案不变</li>
<li>generalize的问题更好解决(贪心，存在最优子问题结构DP，etc.)</li>
</ol>
</li>
</ol>
<a id="more"></a>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p><a href="https://codeforces.com/contest/1473/problem/C">here</a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li>先观察原数列逆序对的特点。发现，原数列可拆分为“直升”和“折叠”两部分；逆序对均在“折叠”处出现。</li>
<li>进一步深入观察，折叠处的逆序对个数存在两个不变量：<ul>
<li>对于非顶点的数，不管在什么位置，因为对称性，它和其他的每个数都会“反应”两次（i.e.对逆序对的贡献为2）。</li>
<li>（这一点比较难发现）对于顶点的数，正好和所有的数反应一次（对逆序对的贡献为1）。</li>
</ul>
</li>
<li>总结：折叠处的逆序对个数和permutation无关，永远不变；直升处不允许出现任何的逆序对。</li>
<li>由此可以得出简洁的构造算法。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @author: Xingjian Bai </span></span><br><span class="line"><span class="comment">* @date: 2021-01-14 14:41:12</span></span><br><span class="line"><span class="comment">* @description: </span></span><br><span class="line"><span class="comment">* /Users/jackbai/Desktop/ER/c.cpp </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @notes: </span></span><br><span class="line"><span class="comment">* g++ -fsanitize=address -ftrapv c.cpp</span></span><br><span class="line"><span class="comment">*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>; </span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line">ll n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">		ll str = n - (n - k) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">		ll fold = n - k + <span class="number">1</span>;</span><br><span class="line">		ll nat = (fold - <span class="number">1</span>) * fold;</span><br><span class="line">		ll num = nat - (fold - <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= str; i ++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = fold; i &gt;= <span class="number">1</span>; i --)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; str + i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task"></a>Task</h3><p>变量$x$初始值为0，给定一个操作序列$a[1..n]$，每个操作为$x$++或者$x$—。$m$次询问，每次给定区间$[l, r]$，询问将操作序列$a[1..l-1]$++$a[r + 1, n]$应用在x时，过程中一共会出现多少个不同的值。</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li>明显地，数值个数可以转化为区间的上下界。</li>
<li>将答案拆成前后两部分考虑。对于前一部分，简单记录前缀和的最值即可。对于后一部分，考虑将操作“对于时间进行逆转”，将某个后缀和操作看成是对结果的逆向操作。这样看待问题不改变操作过程中的最值。所以对于后一部分，我们只要记录a的操作取反的后缀和即可。注意最后统计答案的时候，要将后缀和平移”sum $a[1..l-1]$++$a[r + 1, n]$“这么多。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @author: Xingjian Bai </span></span><br><span class="line"><span class="comment">* @date: 2021-01-14 15:04:08</span></span><br><span class="line"><span class="comment">* @description: </span></span><br><span class="line"><span class="comment">* /Users/jackbai/Desktop/ER/d.cpp </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @notes: </span></span><br><span class="line"><span class="comment">* g++ -fsanitize=address -ftrapv d.cpp</span></span><br><span class="line"><span class="comment">*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>; </span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1000010</span>], mn[<span class="number">1000010</span>], mx[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> s2[<span class="number">1000010</span>], mn2[<span class="number">1000010</span>], mx2[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		mn[<span class="number">0</span>] = mx[<span class="number">0</span>] = s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">			<span class="keyword">char</span> c;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">			op[i] = (c == <span class="string">&#x27;+&#x27;</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">			s[i] = s[i - <span class="number">1</span>] + op[i];</span><br><span class="line">			mn[i] = min (mn[i - <span class="number">1</span>], s[i]);</span><br><span class="line">			mx[i] = max (mx[i - <span class="number">1</span>], s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		s2[n + <span class="number">1</span>] = mn2[n + <span class="number">1</span>] = mx2[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">			s2[i] = s2[i + <span class="number">1</span>] - op[i];</span><br><span class="line">			mn2[i] = min (mn2[i + <span class="number">1</span>], s2[i]);</span><br><span class="line">			mx2[i] = max (mx2[i + <span class="number">1</span>], s2[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> st, ed, i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; st &gt;&gt; ed;</span><br><span class="line">			<span class="keyword">int</span> lb = <span class="number">0</span>, ub = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> gap = s[n] + -(s[ed] - s[st - <span class="number">1</span>]);</span><br><span class="line">			lb = min (lb, mn[st - <span class="number">1</span>]);</span><br><span class="line">			ub = max (ub, mx[st - <span class="number">1</span>]);</span><br><span class="line">			lb = min (lb, mn2[ed + <span class="number">1</span>] + gap);</span><br><span class="line">			ub = max (ub, mx2[ed + <span class="number">1</span>] + gap);</span><br><span class="line">			<span class="comment">// cerr &lt;&lt; &quot; : &quot; &lt;&lt; mx2[ed + 1] &lt;&lt; &quot; &quot; &lt;&lt; gap &lt;&lt; &quot; &quot; &lt;&lt; ub &lt;&lt; endl;</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; (ub - lb + <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task"></a>Task</h3><p>都是套路·魔改最短路: </p>
<script type="math/tex; mode=display">
dist(e_1, e_2, ..., e_k) = \sum_{i=1}^kv_{e_i} - \max_{i=1}^{k}v_{e_i} + \min_{i=1}^{k}v_{e_i}</script><p>$nlogn$求单元最短路。</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li>乍一看，普通的DP不满足子问题最优的特性；为了更好的维护max&amp;min，第一个想法是给边排序，没有问题。</li>
<li>但是，“给边排序然后逐一加入”的算法有着天然的缺陷：<strong>基于增边的单元最短路算法复杂度本身就不对啊…</strong>更不用说，由于max和min的同时存在，就算可以按升序<strong>或者</strong>降序增边，我们也找不到满足<strong>子问题最优</strong>的设计状态的方案…</li>
<li>发现，max&amp;min的限制可以消除！具体来说，我们先将问题generalize，将限制放宽：把max和min改成任意两条边。然后我们发现，<strong>将限制放宽并不会产生更优的解</strong>，所以两个问题的答案等价。</li>
<li><strong>将限制放宽</strong>以后，我们就能设计出正确的DP了。用两个bool维进行辅助维护，做Dijkstra即可。</li>
<li>这是套路！！！！回想一下<a href="https://codeforces.com/contest/1470/problem/A">CR694-A</a>, 同样是<strong>放宽限制-&gt;最优答案不变-&gt;generalized的问题更好解决</strong>。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @author: Xingjian Bai </span></span><br><span class="line"><span class="comment">* @date: 2021-01-14 15:16:42</span></span><br><span class="line"><span class="comment">* @description: </span></span><br><span class="line"><span class="comment">* /Users/jackbai/Desktop/ER/e.cpp </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @notes: </span></span><br><span class="line"><span class="comment">* g++ -fsanitize=address -ftrapv e.cpp</span></span><br><span class="line"><span class="comment">*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>; </span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> ll oo = <span class="number">1e16</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, next;</span><br><span class="line">	ll val;</span><br><span class="line">&#125; edges[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> point[<span class="number">500050</span>], te = <span class="number">1</span>;</span><br><span class="line">ll dis[<span class="number">500050</span>][<span class="number">2</span>][<span class="number">2</span>]; <span class="comment">//weither used the coupon</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">500050</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, ll c)</span> </span>&#123;</span><br><span class="line">	edges[++ te].to = b;</span><br><span class="line">	edges[te].val = c;</span><br><span class="line">	edges[te].next = point[a];</span><br><span class="line">	point[a] = te;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span> &lt;<span class="keyword">int</span>, <span class="built_in">pair</span> &lt;<span class="keyword">bool</span>, <span class="keyword">bool</span>&gt; &gt; Ind;</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span> &lt;<span class="built_in">pair</span>&lt;ll, Ind&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">		ll x, y, z;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">		add (x, y, z);</span><br><span class="line">		add (y, x, z);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		dis[i][<span class="number">0</span>][<span class="number">0</span>] = dis[i][<span class="number">0</span>][<span class="number">1</span>] = dis[i][<span class="number">1</span>][<span class="number">0</span>] = dis[i][<span class="number">1</span>][<span class="number">1</span>] = oo;</span><br><span class="line">	dis[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	q.push(MP(<span class="number">0</span>, MP(<span class="number">1</span>, MP(<span class="number">0</span>, <span class="number">0</span>))));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="built_in">pair</span> &lt;ll, Ind&gt; tp = q.top();</span><br><span class="line">		<span class="keyword">int</span> x = tp.S.F;</span><br><span class="line">		<span class="keyword">bool</span> i1 = tp.S.S.F, i2 = tp.S.S.S;</span><br><span class="line">		ll d = dis[x][i1][i2];</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[x][i1][i2])</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		<span class="comment">// cerr &lt;&lt; &quot; : &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; i1 &lt;&lt; &quot; &quot; &lt;&lt; i2 &lt;&lt; &quot; &quot; &lt;&lt; d &lt;&lt; endl;</span></span><br><span class="line">		vis[x][i1][i2] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> e = point[x]; e; e = edges[e].next) &#123;</span><br><span class="line">			<span class="keyword">int</span> to = edges[e].to;</span><br><span class="line">			<span class="keyword">if</span> (d + edges[e].val &lt; dis[to][i1][i2]) &#123;</span><br><span class="line">				dis[to][i1][i2] = d + edges[e].val;</span><br><span class="line">				q.push(MP(-dis[to][i1][i2], MP(to, MP(i1, i2))));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i1 == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span> (d + edges[e].val * <span class="number">2</span> &lt; dis[to][<span class="number">1</span>][i2]) &#123;</span><br><span class="line">					dis[to][<span class="number">1</span>][i2] = d + edges[e].val * <span class="number">2</span>;</span><br><span class="line">					q.push(MP(-dis[to][<span class="number">1</span>][i2], MP(to, MP(<span class="number">1</span>, i2))));</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span> (i2 == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span> (d &lt; dis[to][i1][<span class="number">1</span>]) &#123;</span><br><span class="line">					dis[to][i1][<span class="number">1</span>] = d;</span><br><span class="line">					q.push(MP(-dis[to][i1][<span class="number">1</span>], MP(to, MP(i1, <span class="number">1</span>))));</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; min(dis[i][<span class="number">1</span>][<span class="number">1</span>], dis[i][<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Competitions</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Codeforces</tag>
        <tag>Optimisation</tag>
        <tag>PrefixStructure</tag>
      </tags>
  </entry>
  <entry>
    <title>在牛津的第一学期</title>
    <url>/2020-12-30-%E5%9C%A8%E7%89%9B%E6%B4%A5%E7%9A%84%E7%AC%AC%E4%B8%80%E5%AD%A6%E6%9C%9F.html</url>
    <content><![CDATA[<p>走过的每一步，不管是踉跄还是奔跑，都值得被记录。</p>
<a id="more"></a>
<h2 id="序言：新的开始"><a href="#序言：新的开始" class="headerlink" title="序言：新的开始"></a>序言：新的开始</h2><p>总结什么的，总是不会拖延过的吧…?</p>
<p>12月29日（好吧，其实已经是30号凌晨了），寒假的第四周，2020年倒数第三天。12点才爬起来，我下午去公园跑了一万米。这是来英国以后的第二次。起跑配速不错，但心率非常高(190)，步频也不理想(156)。困难出现在6公里以后。平时跑都只跑6公里的，所以一过第三圈，我立刻感受到了身体的警戒信号。脚步开始变沉，两步一呼吸开始维持不住：最后的4公里会是难关。</p>
<p>这四公里，就当作是大学四年吧，我和自己说。很像，不是吗？同样的咬牙和奋斗，同样的艰难和疲惫；同样都是对你内心，仅仅是内心，而不是能力的挑战。于是，从头到尾，我真的想了一遍四年。你学完数学分析了吧？备考prelim的痛苦你忍过去了么？你是不是也选了超额的课程，但是在每门课上都在挑战最优秀的学生？你该申请美国的博士了吧？没事，还有一年，再拼一年…</p>
<p>手表响起，我在路边艰难的喘气。嗯，就是这种久违的快乐。我非常热爱长跑；我热爱用热血定下目标，并用热血实现。</p>
<p>开始对自己大学生活的记录，是很早以前看完<a href="https://trinkle23897.github.io/">Trinkle学长的总结</a>以后做出的决定。看了他和清华其他大神同学的经历，我感受到了深深的压力：和他们差太远了，天分和努力。当然，我心中也有一种庆幸和警醒：我才刚刚开始走自己的路，我还有很多机会，赶上他们，超过他们。</p>
<p>对未来有比较清晰的规划或许是我唯一的优势了；抑或这只是对未来的不确定性的认识不足。不管如何，我希望自己能保持规划和记录的习惯，时刻清楚自己的gradient，避免被身边目光短浅的人们的影响而陷入局部最优解。</p>
<p>至少，记下所有走过的路吧；希望这是一条通往星星的路。</p>
<h2 id="起跑线上-Sep"><a href="#起跑线上-Sep" class="headerlink" title="起跑线上 (Sep)"></a>起跑线上 (Sep)</h2><p>刚到牛津的两周，主旋律是热身。</p>
<p>上学以前的那个8个月，我过的并不理想。诚然和爸爸妈妈看了无数的电影，和同学去了天津旅行，但更多时间是在虚度。后来才意识到，这段时间如果利用好收获能有多大。迈入牛津的时候，我整个人可以说是离“学习”的状态非常远（直到现在，我也在改变的过程中）。</p>
<p>隔离的时候读了“科学哲学”的通识读本；没记住什么具体知识，只意识到科学的发展没有自己想的那么理想化；科学发展和paradigm有关，和科学家有关；我们一切的探索是否有意义都是一个值得争论的话题。当时以为自己会去旁听Philosophy of Science的课，结果之后并没有。</p>
<p>最有意思的事情是做的两个小项目了。初见Stefan，想着一定要给他留下个好印象，就极其认真的完成了他布置的项目。其中一个是有关<a href="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/project_report_Xingjian2.pdz">某个组合问题</a>的；人家化学教授分明只要数值解，我硬是推DP找到了精确的formula（算是复习了一下比较trivial的状压DP优化成高维DP的技巧）。另一个项目是关于<a href="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/Couples_are_Forever_Game_Analysis2.pdf">某个Nim-like博弈游戏的二维拓展</a>：做完项目才发现，其实是最trivial的情况… 最后，成功给Stefan留下了”工作狂”，“熬夜大师”，“强迫症患者”等印象。</p>
<p>隔离的时候就见到了Felipe和Tady，巴西和匈牙利的同学。Felipe感觉性格比较和善，然后什么都会一些；Tady曾经是物理国家队队长，本来能参加被疫情叫停的IPhO 2020。认识的第一天和Tady聊了聊，感觉对高中竞赛都有些经历和感触，当时就和他亲近了不少。</p>
<p>后来才知道，隔壁的Ray在这短短两周学完了Andrew的Deep Learning Specialisation；其实让我有点胆战心惊。忽然意识到自己以为的”领先优势“其实并不大，存在性也值得质疑。或许也是受这个影响吧，我在不短的时间内都错误的把Ray当作在学术上的比较对象。</p>
<p>最搞笑的事情是，我觉得隔离期间吃的不够，就理直气壮的给学院发了封邮件，夸张的说double饭量我才够：</p>
<p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/meal-query.png" alt="email" style="zoom:30%;" /></p>
<p>结果，学院真的给我送了两份饭……（不拒绝，反正免费的hhh</p>
<p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/double-meal.jpg" alt="double-meal" style="zoom:20%;" /></p>
<h2 id="第一个八百米-Oct-Nov"><a href="#第一个八百米-Oct-Nov" class="headerlink" title="第一个八百米 (Oct, Nov)"></a>第一个八百米 (Oct, Nov)</h2><p>第一学期从我的手中滑过去了。这样的恍惚只可以有一次。</p>
<p>8周的时间不短也不长。课业比想象中紧凑（后来发现，是想象的太糟糕了），初入大学的社交生活也新鲜感十足（但对学长的一句话印象颇深：大一是在新鲜感的滤镜下盲目社交）。最遗憾的事情，是没有抓住时间，去思考，去清醒的做事。</p>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>一开始对大学数学有点不适…尤其是一上来就开了Baby Rudin…感觉智商欠费…</p>
<h4 id="数学分析"><a href="#数学分析" class="headerlink" title="数学分析"></a>数学分析</h4><p>毕竟是第一学期的Analysis，讲师(Vicky Neale)非常友善，经常帮大家形象化的思考问题。从实数（而不是集合论+自然数）到序列到级数，内容主要还是过渡性的。感觉最不满意的事，我做sheets的过程中，一直没有成功找到“Sufficiently Rigorous”的感觉。</p>
<p>Rudin的书真的有点吓到我了…看第二章”Intro to Topology“的时候像是在坐过山车… 应该是本好书——站在极高的角度看待问题。希望下学期能认真读前几章吧。</p>
<h4 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h4><p>总觉得自己在OI中学过一些…其实从来没结构化的学过。感觉知识不难，但是学透也有些吃力。希望下学期能抓着Done Right不放… 寒假看了一部分Gilbert Strang的课，感觉收获蛮大的。他讲课慢吞吞，好多时候似乎都在磕磕绊绊的推到公式（不是装的我xxx），但是讲的很直观。</p>
<p>对这学期数学的总体感觉就是，其实自己有进行充分的探索，也找到了很多合适的资源(Rudin, Done right)；只要砸时间和精力，总是没有问题的。但问题就出在并没有努力的砸时间精力……真的是“思而不学”。还有一点，偶然的机会读了几个数学系学生的博客，被他们对数学的热情所震惊到了；这导致我在一段时间里，非常不清楚自己究竟想学什么。再进行思考，我其实只应该投入有限的时间在数学上；毕竟我最热爱和擅长的还是CS领域。</p>
<h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><p>作为第一门专业课，牛津计算机系对本科CS学习的切入角度让人耳目一新。Functional Programming在程序最基本的结构层面就与众多的命令式语言不同—声明式的变量（常量），作为语言特性的lazy evaluation，以及将函数看作一种value的基本思想… 我在学的过程中，一直在试图从经验中寻找参照物，这反而导致我没有细细品味函数式思想的本质。</p>
<p>FP每周的office hours很有意思～教授<a href="https://www.cs.ox.ac.uk/people/Geraint.Jones">Geraint Jones</a>是领域内的大牛，讲到当年的探索（其实就是现在学的知识点）总是特别兴奋（他还特别不适应视频教学的模式，每次都会忘记切换自己的演示稿；在被同学提醒以后，就会“aaa！”的大叫一声，我准确预测了好多次hh）。Office Hour经常会退化成lecture重述（尤其是在某个不怎么看note还问辣鸡概念的同学的推动下）， 所以在好胜心&amp;求知欲（）的激励下，我每次都会准备一些自认为有深度的问题。有两三次真的让Geraint教授很愉快（关于fold&amp;unfold泛化的问题，后来才知道其实是deforestation）。</p>
<p>Stefan对我的Problem Sheets经常犯小错误有些不满，建议我重新看notes。但我实在是找不到note的主线，于是在假期把Bird教授的《Intro to FP》刷了一遍，就是后话了。</p>
<h4 id="OI"><a href="#OI" class="headerlink" title="OI"></a>OI</h4><p>还是要说说这个话题的… 其实打的早就不是OI了，但心中所想还是OI，姑且这样叫吧。</p>
<p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/cf-rating.png" alt="cf-rating" style="zoom:80%;" /></p>
<p>满怀热情的参加了几（$\approx$ 10）场比赛，CF rating在2300上下波动；UKIEPC总算是正常写完，但是写的奇慢无比；感觉现在打的就是一种情怀了吧。开学初和Costin老哥聊过，在他身上，我能看到些自己未来的影子。</p>
<p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/costin1.png" alt="Costin-record"></p>
<p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/costin2.png" alt="Costin-record"></p>
<p>之前说，偶尔打打CP可以“磨脑子”（从<a href="https://www.cnblogs.com/ivorysi/">司公子</a>博客学来的说法），但是忽然发现，自己已经快要忘记磨脑子的需求了。陷进了大学学习的routine里，并不渴望探索，高强度思考的过程 —— 这可不行。</p>
<p>比赛还是要参加的；希望拥有一定的频率后，就可以找到一种稳定的感觉，而不是一直失速下落了吧。然后，偶尔也学学新的知识和算法吧，你高中没有机会学多项式，NTT，WFT之类的就退役了，现在是不是可以继续了？如果OI真的还是一种乐趣，那就继续探索吧。下学期的算法课对你应该相对轻松，试着利用那些时间吧。</p>
<h4 id="Hackathon"><a href="#Hackathon" class="headerlink" title="Hackathon"></a>Hackathon</h4><p>一段被大佬带飞的经历… 从开题到写数据库到写测试，感觉就是Alan用40%的时间看我（和另一个菜鸟）瞎侃，40%的时间教我做，然后20%的时间把最关键的模块都写了… 我们做了一个疫情期间线上交友网站，自认为点子不错，实现的网页也还算小巧精致。就这，拿了OxHack 2020的举办方最高奖…</p>
<p>后来零零碎碎查了一些，知道我们那两天做的事情其实比较的流程化。设计界面，Vue，第三方数据库，需要的也就是full stack最最基础的经验吧。</p>
<h3 id="Misc-社交"><a href="#Misc-社交" class="headerlink" title="Misc - 社交"></a>Misc - 社交</h3><h4 id="同学"><a href="#同学" class="headerlink" title="同学"></a>同学</h4><p>在新鲜感滤镜下交到的朋友都并不一定是志同道合的；也是因为疫情，这一整学期并没有交到什么特别好的朋友。Tady算是非常好的普通朋友了，我们一起看过恐怖电影，一起在Matriculation照了最开心的合照 — 但是文化的代沟还是让我明显觉得不适。似乎是在内心深处有一种轻微的抵触，抵触与意识形态，文化，语言，成长环境不同的人过于依赖。不过，我也明白这种困境时可解的：如果我们能多谈谈都热爱的东西，谈谈share的情感和经历，应该就会好很多了。</p>
<p>和Alex，Felipe，Gessie的情况也类似；关系都不错，会给他们做饭，会一起跑步出去玩，一起去食堂，但并没有对他们敞开心扉的时刻。这就是正常的朋友关系吧？至少都感觉挺舒适的。</p>
<p>想特别说说college里中国的两个同学。我时常会反思，我和他们控制距离的做法究竟是为什么，是不是我的问题。坦诚讲，他们都不属于我想交朋友的“第一梯队”（那些人可以像Alan一样性格温和并有自己突出的长处，也可以像Kendall那样相处起来比较舒服，也可以像憬羿那样，有很多share的情感和经历…）。剔除出第一梯队以后，我开始将目光集中到他们身上许多的缺点上。我不喜欢他对感情的玩弄（好似自己忠贞不渝），经常性的秀优越（…），尤其讨厌他无脑的CS学习。我也厌恶他奇奇怪怪的口音，三脚猫的算法，以及对未来的短视。我并非不明白他们也有许多优点 — 对他们的缺点的强调反而显示出我的不自信和不坚定，可在这种心境下与他们接触又会对我产生更大的刺激— 这是一个难解的结。于是，我选择了保守的trivial解：并不期望和他们互相帮助，把他们看作纯粹的竞争对手。</p>
<h4 id="Tutor"><a href="#Tutor" class="headerlink" title="Tutor"></a>Tutor</h4><p>和Stefan的关系一直不错，他对我也有了更多，更真实的了解。他在学期中明确的拒绝了在大一帮我找研究的机会，并详细的解释了原因；他对我下学期额外上一门digital system的请求提出严肃的质疑，这在我脑海里敲响了警钟。在他心目中，对我并不是那么有信心。</p>
<h4 id="遥远的他们"><a href="#遥远的他们" class="headerlink" title="遥远的他们"></a>遥远的他们</h4><p>和爸爸妈妈每天会打30分钟左右的电话。有时候会有很有意思的事情分享，更多时候是填满他们对我的思念。学期中偶尔有几次，想到长大后和父母会越走越远，心中竟涌入了一种莫大的悲伤。和想起她时心中的感觉类似。和她的故事似乎总是发生在极长的时间尺度上，而最后一次的交流，又是那么的突然。偶尔也会想起那件事，分明不难，分明是我对她奉献的最好机会：但我却选了最糟糕的做法，给了她最大的伤害。无以名状的后悔应该会伴随着我了，我默默接受了这个事实。直到我们的人生再次相交，我愿意成倍的给她补偿。</p>
<p>和老友们的关系一直细若游丝；可自己在孤独的时候，经常会想到他们。那段关系一直游离在理性的法外之地；这种在黑暗的洞穴中随机游走的感觉，分明是以前最讨厌的。</p>
<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>这学期，体能在按部就班的回复：减了5斤，捡起了网球，跑过两个一万米。网球的技巧还记得些，击实球的感觉让我的球比较有攻击力；希望下学期能进入Advanced的小组。跑步的话，过了寒假，减脂&amp;恢复的阶段就该结束了，希望自己能在下学期制定一个8周的训练计划，在结束的时候跑一次半马。</p>
<p>打字…真的是莫名其妙就养成的一个不好不坏的习惯…提升效率的事情，应该不算很浪费时间吧？</p>
<p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/blog-resource/typing_speed_1380.jpg" alt="typing" style="zoom:40%;" /></p>
<h4 id="学会做的菜"><a href="#学会做的菜" class="headerlink" title="学会做的菜"></a>学会做的菜</h4><p>蚂蚁上树，煎鸡蛋，炒鸡蛋，炒土豆丝，西红柿鸡蛋蘑菇汤，可乐鸡翅。</p>
<h2 id="800米以后-Dec"><a href="#800米以后-Dec" class="headerlink" title="800米以后 (Dec)"></a>800米以后 (Dec)</h2><p>努力就是不断刺激自己的过程。用短期的目标，长期的梦想，乃至一生的意义，激发出对自身&amp;对时间的渴望，激发出足以抵抗怠惰的动力。</p>
<p>或许站在更高层次时，人们会思考这一切是为了什么 — 他们有些成为了哲学家，有些丧失了信仰。这不是你要担心的问题。</p>
<p>你现在该做的，就是贯彻自己的计划，坚定自己的价值观，并咬牙努力。只有这样心无旁骛的向前，只有靠你的意志，你才能成为同龄人中的佼佼者，才有可能在这短暂的一生中，触摸到non-trivial的事物。</p>
<p>2020.12.31 于Tomas White 1-8 宿舍</p>
]]></content>
      <categories>
        <category>总结与回顾</category>
      </categories>
      <tags>
        <tag>总结与回顾</tag>
      </tags>
  </entry>
  <entry>
    <title>Teach_Yourself_Physics</title>
    <url>/2020-12-07-Teach-Yourself-Physics.html</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="Citations"><a href="#Citations" class="headerlink" title="Citations"></a>Citations</h3><blockquote>
<p>Study hard what interest you the most in the most undisciplined, irreverent and original manner possible — Richard Feynman</p>
<p>The greater the continent of knowledge, the greater the coastline of the unknown — Isaac Newton</p>
<p>And self-education is, I firmly believe, the only kind of education there is — Isaac Asimov</p>
<p>Of all the communities available to us, there is not one I would want to devote myself to except for the society of the true seekers, which has very few living member at any one time — Albert Einstein</p>
<p>I do not know what I may appear to the world, but to myself I seem to have been only like a boy playing on the seashore, and diverting myself in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before me — Isaac Newton</p>
<p>The art of being wise is the art of knowing what to overlook — William James</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 679 比赛总结</title>
    <url>/2020-11-09-Codeforces-CR679.html</url>
    <content><![CDATA[<h2 id="模型总结"><a href="#模型总结" class="headerlink" title="模型总结"></a>模型总结</h2><ul>
<li>寻找”最小满足一定性质的区间“可以利用单调性做优化，在值域做单调遍历。</li>
<li>树上的点权-边权转化：边权可以被求和放到点上，dis(u, v) = dis(u)+dis(v)-dis(lca(u, v))*2。</li>
<li><strong>逐层剖析问题。每剥下一层以后，一个重新formulate一遍问题，清空缓存，寻找下一步思路</strong></li>
</ul>
<a id="more"></a>
<h2 id="A-Perform-Easily"><a href="#A-Perform-Easily" class="headerlink" title="A Perform Easily"></a><a href="https://codeforces.com/contest/1434/problem/A">A</a> Perform Easily</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定序列An，以及B1-B6。求数组Cn使得max(Ai-B_Ci) - min(Ai-B_Ci)最小。</p>
<h3 id="破题方法"><a href="#破题方法" class="headerlink" title="破题方法"></a>破题方法</h3><p>考虑所有的Ai-Bj所构成的序列。我们要在其值域选出一段区间使得其包含由A1-An生成的数。解法为<strong>双指针</strong>。</p>
<p>这道题当时想了好久…</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a><a href="https://codeforces.com/contest/1427/problem/B">B</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一个操作序列，包含两种操作：</p>
<ol>
<li>一个物品被加入了集合</li>
<li>声明此时集合中最小的物品价值为v，并将其拿出集合。</li>
</ol>
<p>求加入物品价值的一个合法解。</p>
<h3 id="破题方法-1"><a href="#破题方法-1" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li><p><strong>简化策略：</strong>假设每次拿出的价值最小的物品，就是最后放进去的物品。</p>
<p><strong>最优性证明：</strong>假设x次操作拿出的物品价值为$v_x$，将其放入的操作序号为$p_x$, $v_x$ 造成非法情况当且仅当$\exist y \in (p_x, x)$ s.t. $v_y &gt; v_x$. 所以，当$p_x$取最大时，$v_x$不会造成非法情况。$p_x$取最大所造成的占位也不会影响最优性。</p>
</li>
<li><p>构造<strong>贪心</strong>策略：维护栈结构，分配物品，最后判断合法性。</p>
</li>
</ol>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a><a href="https://codeforces.com/contest/1434/problem/C">C</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>定义一次在t时间攻击：立刻造成a点伤害，在接下来c秒，每秒回复b点生命，在t+d时刻及以后才能发起下一次攻击。求攻击能杀死的怪物的最大生命值。</p>
<h3 id="破题方法-2"><a href="#破题方法-2" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li>何时无敌：a&gt;b*c</li>
<li>若不无敌，则一定要在c时间内解决战斗。</li>
<li>找规律：在c时间内，是定值减等差数列，可O(1)计算。</li>
</ol>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul>
<li><strong>逐层剖析问题。</strong>每一层都很trivial。</li>
</ul>
<h2 id="D-Roads-and-Ramen"><a href="#D-Roads-and-Ramen" class="headerlink" title="D Roads and Ramen"></a>D <a href="https://codeforces.com/contest/1413/problem/F">Roads and Ramen</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给边01染色，单边修改，询问树上最长偶直径。</p>
<h3 id="破题方法-3"><a href="#破题方法-3" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li>首先将边的01权重化为点权。</li>
<li>重要性质：同色直径的一个端点一定是直径的端点。</li>
<li>分别以直径端点为根，线段树维护子树反转。</li>
</ol>
<h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><ul>
<li>本质上是“01点权，区间修改，寻找同权直径”。</li>
</ul>
<h2 id="E-A-Convex-Game"><a href="#E-A-Convex-Game" class="headerlink" title="E A Convex Game"></a>E <a href="https://codeforces.com/contest/1434/problem/E">A Convex Game</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>类Nim游戏：一堆石子有k ($k \leq 1e5$)个状态($v1 &lt; v2 &lt; … &lt; v_k \leq 1e5$)， 两人从v1开始单调的选状态，假设上上个人选的状态为$v_h$上一个人选的状态为$v_i$, 你选的状态为$v_j$，则要满足：</p>
<ol>
<li>$i&lt;j$</li>
<li>$v_i - v_h &lt; v_j - v_i$</li>
</ol>
<p>求这堆石子是否为先手胜。</p>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul>
<li>SG value is smaller than $\sqrt{2*maxv}+1$.</li>
</ul>
<p>目前暴力思路：SG状态有k^2个，计算每个需要k的时间。</p>
<ul>
<li>当固定$v_i$，逐步缩$v_i-v_h$的时候，sg value只会增加。所以可以开dp[i][sg-value]数组记录sg值的变化。此时状态$k*\sqrt k$个。</li>
</ul>
]]></content>
      <categories>
        <category>Competitions</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codechef October Challenge</title>
    <url>/2020-10-15-CodeChef-OctoberChallenge2020.html</url>
    <content><![CDATA[<h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><ul>
<li>绝对值函数：用分类讨论进行转化</li>
<li>BITSET！！！</li>
</ul>
<a id="more"></a>
<h2 id="POSAND"><a href="#POSAND" class="headerlink" title="POSAND"></a><a href="https://www.codechef.com/OCT20B/problems/POSAND">POSAND</a></h2><p>构造题的经典思路：</p>
<ul>
<li>小case特殊讨论</li>
<li>大case用增量法构造</li>
</ul>
<h2 id="ADDSQURE"><a href="#ADDSQURE" class="headerlink" title="ADDSQURE"></a><a href="https://www.codechef.com/OCT20B/problems/ADDSQURE"><strong>ADDSQURE</strong></a></h2><p><strong>Bitset！！！</strong></p>
<p>二进制操作，速度*64/*32。</p>
<p><a href="https://www.cnblogs.com/RabbitHu/p/bitset.html">Bitset教程</a></p>
<h2 id="DDIMMST"><a href="#DDIMMST" class="headerlink" title="DDIMMST"></a><a href="https://www.codechef.com/OCT20B/problems/DDIMMST"><strong>DDIMMST</strong></a></h2><h3 id="破题方法"><a href="#破题方法" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li>定义了边权函数的题目：一定要利用边权的性质，简化选边的过程。</li>
<li>将边权函数中的绝对值转化成分类讨论，最大边一定在某些候选边内。</li>
</ol>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul>
<li>最小生成树有三种方法：Prim，Kruskal，Boruvka。<strong>选择可以应用性质的那一个。</strong></li>
</ul>
]]></content>
      <categories>
        <category>Competitions</category>
        <category>Codechef</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Codechef</tag>
        <tag>Bitset</tag>
        <tag>Construction</tag>
        <tag>MST</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Grand Round 11 比赛总结</title>
    <url>/2020-10-10-Codeforces-CGR11.html</url>
    <content><![CDATA[<p>粗心是最大的问题。<strong>Special Case没想清；long long的计算写成了int</strong>。</p>
<p>与其闷头写乱搞，不如整理思路，<strong>定位并替换掉乱搞的部分</strong>。</p>
<a id="more"></a>
<h2 id="教训："><a href="#教训：" class="headerlink" title="教训："></a>教训：</h2><ul>
<li>(B) 贪心/动态规划的时候，一定要<strong>提前想清楚</strong>边界情况。</li>
<li>(E) 随机化算法不轻易用。不如想清楚<strong>随机化的部分能否转为确定性的</strong>。</li>
<li>(A) 对于简单的题目，写程序以前，想好程序的结构&amp;分类讨论。</li>
</ul>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h2 id="B"><a href="#B" class="headerlink" title="B"></a><a href="https://codeforces.com/contest/1427/problem/B">B</a></h2><h3 id="破题方法"><a href="#破题方法" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li><p>发现1/2/3的区别。确定贪心的正确性。</p>
</li>
<li><p>思考贪心的细节。如，哪些情况只能是1，有哪些Special cases：</p>
<ol>
<li>没有W<ol>
<li>只有1场</li>
<li>> 1场</li>
</ol>
</li>
<li>前后的L</li>
</ol>
</li>
</ol>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a><a href="https://codeforces.com/contest/1427/problem/C">C</a></h2><h3 id="破题方法-1"><a href="#破题方法-1" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li>发现<strong>特殊的限制</strong>：r小，t不等。由此，发现<strong>特殊的性质</strong>：任意两个间隔&gt;1000的讲座，一定可以到达。</li>
<li>想出暴力DP。</li>
<li>发现性质对DP的优化。</li>
</ol>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul>
<li><strong>经典DP问题，特殊条件限制优化</strong></li>
</ul>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a><a href="https://codeforces.com/contest/1427/problem/D">D</a></h2><h3 id="破题方法-2"><a href="#破题方法-2" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li>思考“有序”的形成方法。可以是“$\forall i \in [1, n]$, 第i个位置是i”，也可以是“$\forall i \in [1, n$), i下一个位置是i+i”。思考本题的操作发现，每个位置上的数字（绝对位置）很难维护。但是数字的相对位置很好维护。</li>
<li>所以，每一次操作增加一对“相邻数”。</li>
</ol>
<h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><ul>
<li>对<strong>“用特定操作O构造特定结构S”</strong>的题目的普适思考：寻找S的等价命题/等价构造方法，在其中找出与O性质相似的一个，用O构造。</li>
</ul>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a><a href="https://codeforces.com/contest/1427/problem/E">E</a></h2><h3 id="破题方法-3"><a href="#破题方法-3" class="headerlink" title="破题方法"></a>破题方法</h3><ol>
<li>对操作进行整理：加法实现乘法；异或是最后一步。</li>
<li>加法，异或，1。想到了什么？<strong>裴蜀定理</strong>。寻找x, y, 使得gcd(x, y)==1.</li>
<li>最简单的思路是随机y。但是，<strong>为何不思考一下，给定x，能否确定性的构造出$y$ $s.t. gcd(x, y)==1$</strong></li>
<li>假设x的最高二进制位为k。y = $x$ ^ $(x<em>2^k)$ = $(2^k+1)</em>x-2^k*2$，一定和x互质。</li>
</ol>
]]></content>
      <categories>
        <category>Competitions</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Construction</tag>
        <tag>Codeforces</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanf&amp;Printf用法梳理</title>
    <url>/2020-10-06-C-IO.html</url>
    <content><![CDATA[<p>从此以后，改用C语言的输入输出以提高效率。</p>
<a id="more"></a>
<p><code>%[flags][width][.precision][length]specifier</code>‘</p>
<h3 id="Specifier"><a href="#Specifier" class="headerlink" title="Specifier"></a>Specifier</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">specifier</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d/i</td>
<td style="text-align:center">32bits integer</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:center">32bits unsigned integer</td>
</tr>
<tr>
<td style="text-align:center">f</td>
<td style="text-align:center">float (single-precision)</td>
</tr>
<tr>
<td style="text-align:center">lf</td>
<td style="text-align:center">double (double-precision)</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:center">char, the parameter can be ASCII</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">char*</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td style="text-align:center">pointers, output in base 16 form</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">‘%’</td>
</tr>
<tr>
<td style="text-align:center">e/E</td>
<td style="text-align:center">output float/double by 科学计数法</td>
</tr>
<tr>
<td style="text-align:center">g/G</td>
<td style="text-align:center">output the whatever type in the shortest way</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">flags</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">show sign</td>
</tr>
<tr>
<td style="text-align:center">[space]</td>
<td style="text-align:center">‘ ‘ if positive else ‘-‘</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">for all numbers, use 0 instead of ‘ ‘ to fill in the leading space</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Width"><a href="#Width" class="headerlink" title="Width"></a>Width</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">width</th>
<th style="text-align:center">description</th>
<th style="text-align:center">Example</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">decimal number</td>
<td style="text-align:center">the least number of digits outputted</td>
<td style="text-align:center">printf(“%6d”,1000)</td>
<td style="text-align:center">001000</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">Giving the decimal number in printf parameters</td>
<td style="text-align:center">printf(“%*d”,5, 1000)</td>
<td style="text-align:center">01000</td>
</tr>
</tbody>
</table>
</div>
<p>If the length of the outputted number is longer than the assigned length, it will be outputted in its original length.</p>
<h3 id="Precision"><a href="#Precision" class="headerlink" title="Precision"></a>Precision</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">.precision</th>
<th style="text-align:center">description</th>
<th style="text-align:center">Example</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.number</td>
<td style="text-align:center">For integers, it equals to [width=number].</td>
<td style="text-align:center">printf(“%.4d”,10)</td>
<td style="text-align:center">0010</td>
</tr>
<tr>
<td style="text-align:center">.number</td>
<td style="text-align:center">For floats, it denotes the precision after decimal point.</td>
<td style="text-align:center">printf(“%.2f”,1.1234)</td>
<td style="text-align:center">1.12</td>
</tr>
<tr>
<td style="text-align:center">.number</td>
<td style="text-align:center">For strings, it denotes the most number of chars outputted.</td>
<td style="text-align:center">printf(“.2s”. “abcd”)</td>
<td style="text-align:center">“ab”</td>
</tr>
<tr>
<td style="text-align:center">.number</td>
<td style="text-align:center">For g and G, it denots the number of significant figures.</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">.*</td>
<td style="text-align:center">Giving the decimal number in printf parameters</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h3 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">length</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ll</td>
<td style="text-align:center">‘long long’</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td style="text-align:center">added before ‘f’, means ‘long double’</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul>
<li>input integers<ul>
<li>scanf(“%d”, &amp;int)</li>
<li>scanf(“%lld”, &amp;ll)</li>
</ul>
</li>
<li>input doubles<ul>
<li>scanf(“%lf”, &amp;double)</li>
<li>scanf(“%Lf”, &amp;long double)</li>
</ul>
</li>
<li><p>input strings</p>
<ul>
<li>scanf(“%c”, &amp;char)</li>
<li>scanf(“%s”, &amp;char*)</li>
</ul>
</li>
<li><p>output integers</p>
<ul>
<li><p>printf(“%d”, int)</p>
</li>
<li><p>printf(“%lld”, long long)</p>
</li>
<li>printf(“%6d”, int)</li>
</ul>
</li>
<li><p>output doubles</p>
<ul>
<li>printf(“%lf”, double)</li>
<li>printf(“%Lf”, long double)</li>
<li>printf(“%.10Lf”, long double)</li>
</ul>
</li>
<li><p>output strings</p>
<ul>
<li>printf(“%s”, char*)</li>
<li>printf(“%.s”, char*)</li>
<li>printf(“%c”, char)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES201 Homework 0.5:基于显式时间积分的弹簧质点系统物理引擎</title>
    <url>/2020-06-15-taichi-Mass-Spring-System.html</url>
    <content><![CDATA[<p>我编写的第一个基于显式时间积分的物理引擎。</p>
<a id="more"></a>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>弹簧质点系统 (Mass-Spring System, MSS)之所以基础，是因为它的<strong>力学模型</strong>较为简单。实现了力学模型以后，MSS就成为了<strong>时间积分器</strong>的练手任务。</p>
<p>完成这个assignment，一共需要三方面的知识：</p>
<ul>
<li>弹簧质点系统的力学模型</li>
<li>时间积分器</li>
<li>Taichi GUI的键盘交互方法</li>
</ul>
<h3 id="弹簧质点系统的力学模型"><a href="#弹簧质点系统的力学模型" class="headerlink" title="弹簧质点系统的力学模型"></a>弹簧质点系统的力学模型</h3><p>一般地，在空间中一个物体$i$的质量$m$，位矢$x$，速度矢量$v$，受力$f$，和时间$t$一定满足以下关系：</p>
<script type="math/tex; mode=display">\left\{
\begin{aligned}
& \frac {d x} {d t}  =  v \\
& \frac {d v} {d t}  =  \frac fm \\
& f  = \Sigma_{j}^{j\neq i}{f_{i, j}}
\end{aligned}
\right.</script><p>特别地，在弹簧质点系统中，若弹簧的倔强系数为$k$，自然长度为$l$，我们可以得到：</p>
<script type="math/tex; mode=display">f_{i, j} = -k * (\left \|x_i-x_j \right \|_2 - l) *\widehat{(x_i-x_j)} \tag{1}</script><p>其中，$\left |x_i-x_j \right |_2$是$x_i-x_j$的L2范数，</p>
<p>​            $\widehat{(x_i-x_j)}$是$x_i-x_j$正则化之后得到的方向向量，</p>
<p>公式(1)即为<strong>胡克定律</strong>，也就是MSS力学模型的核心。</p>
<h4 id="附加因素1：重力"><a href="#附加因素1：重力" class="headerlink" title="附加因素1：重力"></a>附加因素1：重力</h4><p>除了弹簧以外，我们还可以将其他的一些因素纳入模型中，比如重力。由于力的线性性，考虑这些因素并不会增加模型的复杂度。</p>
<script type="math/tex; mode=display">G_i = g * m_i \tag{2}</script><h4 id="附加因素2：物理位置的边界条件"><a href="#附加因素2：物理位置的边界条件" class="headerlink" title="附加因素2：物理位置的边界条件"></a>附加因素2：物理位置的边界条件</h4><p>因为模拟的空间有限，所以当物体的$x$超出边界时（在更新x以后立刻判断），应及时拉回。</p>
<h4 id="附加因素3：阻尼"><a href="#附加因素3：阻尼" class="headerlink" title="附加因素3：阻尼"></a>附加因素3：阻尼</h4><p>物体在介质中运动，会受到与速度呈正相关的阻力，使物体的速度有随时间衰减的趋势。</p>
<p>我们用以下公式近似系统阻尼对$v$的影响：</p>
<script type="math/tex; mode=display">v_{after} = v_{before} * e^{-\Delta t * d}  \tag{3}</script><p>其中$d$为系统的阻尼系数。</p>
<h3 id="时间积分器"><a href="#时间积分器" class="headerlink" title="时间积分器"></a>时间积分器</h3><p>时间积分器，即用数值的方法模拟力，加速度，和速度积分的过程。按照<strong>“现在状态是否受未来状态影响”</strong>，我们可以将积分器分为显式和隐式。</p>
<h4 id="显式积分"><a href="#显式积分" class="headerlink" title="显式积分"></a>显式积分</h4><h5 id="前向欧拉法-Forward-Euler"><a href="#前向欧拉法-Forward-Euler" class="headerlink" title="前向欧拉法 (Forward Euler)"></a>前向欧拉法 (Forward Euler)</h5><p>最基础的数值模拟</p>
<script type="math/tex; mode=display">\left\{
\begin{aligned}
& v_{t+1} = v_t + \Delta t \frac{f_t}m \\
& x_{t+1} = x_t + \Delta t v_t
\end{aligned}
\right.</script><h5 id="半隐式欧拉法-Semi-implicit-Euler"><a href="#半隐式欧拉法-Semi-implicit-Euler" class="headerlink" title="半隐式欧拉法 (Semi-implicit Euler)"></a>半隐式欧拉法 (Semi-implicit Euler)</h5><p>最基础的数值模拟+不知道为啥有作用的常数优化</p>
<script type="math/tex; mode=display">\left\{
\begin{aligned}
& v_{t+1} = v_t + \Delta t \frac{f_t}m \\
& x_{t+1} = x_t + \Delta t v_{t+1}
\end{aligned}
\right.</script><h5 id="显式积分的优劣分析"><a href="#显式积分的优劣分析" class="headerlink" title="显式积分的优劣分析"></a>显式积分的优劣分析</h5><p>优点：直观，易实现，复杂度低</p>
<p>缺点：当$\Delta t \geq \sqrt{\frac mk} * C$时，单位时间已经超过了震动周期，精度误差会爆炸。</p>
<h4 id="隐式积分"><a href="#隐式积分" class="headerlink" title="隐式积分"></a>隐式积分</h4><h5 id="隐式积分推导"><a href="#隐式积分推导" class="headerlink" title="隐式积分推导"></a>隐式积分推导</h5><p>占坑坑坑坑坑坑坑坑坑坑。推导暂时没看懂..</p>
<h5 id="隐式积分的优劣分析"><a href="#隐式积分的优劣分析" class="headerlink" title="隐式积分的优劣分析"></a>隐式积分的优劣分析</h5><p>优点：稳定，对$\Delta t$要求低。</p>
<p>缺点：求解困难（需要解线性方程），每一步时间复杂度大。</p>
<h3 id="taichi-GUI-需要记住的交互方法"><a href="#taichi-GUI-需要记住的交互方法" class="headerlink" title="taichi-GUI: 需要记住的交互方法"></a>taichi-GUI: 需要记住的交互方法</h3><p>GUI是咋写的，咱也不知道，咱也不想问。只要记住指令就好了。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gui = ti.GUI(<span class="string">&#x27;Mass Spring System&#x27;</span>, res=(<span class="number">512</span>, <span class="number">512</span>), background_color=<span class="number">0xdddddd</span>)</span><br></pre></td></tr></table></figure>
<h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#gui.get_events()</span></span><br><span class="line"><span class="comment">#ti.GUI.ESCAPE, ti.GUI.PRESS, ti.GUI.EXIT, ti.GUI.LMB</span></span><br><span class="line"><span class="comment">#gui.SPACE</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> gui.get_events(ti.GUI.PRESS):</span><br><span class="line">		<span class="keyword">if</span> e.key <span class="keyword">in</span> [ti.GUI.ESCAPE, ti.GUI.EXIT]:</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">elif</span> e.key == gui.SPACE:</span><br><span class="line">        paused[<span class="literal">None</span>] = <span class="keyword">not</span> paused[<span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">elif</span> e.key == ti.GUI.LMB: <span class="comment">#click</span></span><br><span class="line">        new_particle(e.pos[<span class="number">0</span>], e.pos[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> e.key == <span class="string">&#x27;c&#x27;</span>: <span class="comment">#press &#x27;c&#x27;</span></span><br><span class="line">        <span class="comment">#do something</span></span><br><span class="line">    <span class="keyword">elif</span> e.key == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> gui.is_pressed(<span class="string">&#x27;Shift&#x27;</span>):</span><br><span class="line">            <span class="comment">#do something</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#do something</span></span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gui.circles(X, color=<span class="number">0xffaa77</span>, radius=<span class="number">5</span>)</span><br><span class="line">gui.line(begin=(<span class="number">0.0</span>, bottom_y), end=(<span class="number">1.0</span>, bottom_y), color=<span class="number">0x0</span>, radius=<span class="number">1</span>)</span><br><span class="line">gui.text(content=<span class="string">f&#x27;S: Spring stiffness <span class="subst">&#123;spring_stiffness[<span class="literal">None</span>]:<span class="number">.1</span>f&#125;</span>&#x27;</span>, pos=(<span class="number">0</span>, <span class="number">0.9</span>), color=<span class="number">0x0</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Graphics</category>
        <category>Taichi</category>
      </categories>
      <tags>
        <tag>Taichi</tag>
        <tag>GAMES201</tag>
      </tags>
  </entry>
  <entry>
    <title>Lu-Ban-Cube</title>
    <url>/2020-06-09-Lu-Ban-Cube.html</url>
    <content><![CDATA[<h4 id="鲁班魔方求解代码"><a href="#鲁班魔方求解代码" class="headerlink" title="鲁班魔方求解代码"></a>鲁班魔方求解代码</h4><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-D Coordinate</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Co</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y, z;</span><br><span class="line">	Co () &#123;&#125;</span><br><span class="line">	Co (<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;x = a, y = b, z=c;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The structure of Cube and Piece</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);&#125;</span><br><span class="line">	Cube ()	                                  &#123;clear();&#125;</span><br><span class="line">	Cube (<span class="keyword">int</span> c, Co a1, Co a2, Co a3)	        &#123;clear();a[a1.x][a1.y][a1.z]=a[a2.x][a2.y][a2.z]=a[a3.x][a3.y][a3.z]=c;&#125;</span><br><span class="line">	Cube (<span class="keyword">int</span> c, Co a1, Co a2, Co a3, Co a4)	&#123;clear();a[a1.x][a1.y][a1.z]=a[a2.x][a2.y][a2.z]=a[a3.x][a3.y][a3.z]=a[a4.x][a4.y][a4.z]=c;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i ++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++) &#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; a[x][y][z];</span><br><span class="line">					<span class="keyword">if</span> (x != <span class="number">2</span>)	<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i ++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">add</span> <span class="params">(Cube new_piece)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++)</span><br><span class="line">					<span class="keyword">if</span> (a[x][y][z] &amp;&amp; new_piece.a[x][y][z])</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++)</span><br><span class="line">					a[x][y][z] |= new_piece.a[x][y][z];</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sub</span> <span class="params">(Cube added_piece)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// only used when the piece has been added</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++)</span><br><span class="line">					a[x][y][z] -= added_piece.a[x][y][z];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Cube <span class="title">flip</span> <span class="params">(<span class="keyword">int</span> x_c, <span class="keyword">int</span> y_c, <span class="keyword">int</span> z_c)</span> </span>&#123;</span><br><span class="line">		Cube ret;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++) &#123;</span><br><span class="line">					ret.a[x][y][z] = a[x+x_c*(<span class="number">1</span>-x)][y+y_c*(<span class="number">1</span>-y)][z+z_c*(<span class="number">1</span>-z)];</span><br><span class="line">					<span class="comment">//x_c=0:x  x_c=1:2-x </span></span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Cube <span class="title">switch_axis</span> <span class="params">(<span class="keyword">int</span> x_id, <span class="keyword">int</span> y_id, <span class="keyword">int</span> z_id)</span> </span>&#123;</span><br><span class="line">		Cube ret;</span><br><span class="line">		<span class="keyword">int</span> i[<span class="number">3</span>];</span><br><span class="line">		<span class="keyword">for</span> (i[<span class="number">0</span>] = <span class="number">0</span>; i[<span class="number">0</span>] &lt; <span class="number">3</span>; i[<span class="number">0</span>] ++)</span><br><span class="line">			<span class="keyword">for</span> (i[<span class="number">1</span>] = <span class="number">0</span>; i[<span class="number">1</span>] &lt; <span class="number">3</span>; i[<span class="number">1</span>] ++)</span><br><span class="line">				<span class="keyword">for</span> (i[<span class="number">2</span>] = <span class="number">0</span>; i[<span class="number">2</span>] &lt; <span class="number">3</span>; i[<span class="number">2</span>] ++)</span><br><span class="line">					ret.a[i[x_id]][i[y_id]][i[z_id]] = a[i[<span class="number">0</span>]][i[<span class="number">1</span>]][i[<span class="number">2</span>]];</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span> &lt;Cube&gt; all_Cubes () &#123;</span><br><span class="line">		<span class="comment">//Find all Cubes that can be obtained by rotation.</span></span><br><span class="line">		<span class="built_in">vector</span> &lt;Cube&gt; ret;</span><br><span class="line">		<span class="keyword">int</span> rt[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			Cube base = switch_axis (rt[<span class="number">0</span>], rt[<span class="number">1</span>], rt[<span class="number">2</span>]);</span><br><span class="line">			<span class="keyword">int</span> swap_num = (rt[<span class="number">0</span>] &gt; rt[<span class="number">1</span>]) + (rt[<span class="number">0</span>] &gt; rt[<span class="number">2</span>]) + (rt[<span class="number">1</span>] &gt; rt[<span class="number">2</span>]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">1</span>; x ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= <span class="number">1</span>; y ++)</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">1</span>; z ++)</span><br><span class="line">						<span class="comment">//***very important to keep X &#x27;product&#x27; Y = Z, so the rotation is achievable.</span></span><br><span class="line">						<span class="keyword">if</span> ((x + y + z + swap_num) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">							ret.push_back(base.flip(x*<span class="number">2</span>, y*<span class="number">2</span>, z*<span class="number">2</span>));</span><br><span class="line">		&#125; <span class="keyword">while</span> (next_permutation(rt, rt + <span class="number">3</span>));</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Cube <span class="title">simplify</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// only apply on pieces, moveing them to the conner,</span></span><br><span class="line">		Cube ret;</span><br><span class="line">		<span class="keyword">int</span> mn_x = <span class="number">3</span>, mn_y = <span class="number">3</span>, mn_z = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++)</span><br><span class="line">					<span class="keyword">if</span> (a[x][y][z])</span><br><span class="line">						mn_x = min(mn_x, x), mn_y = min(mn_y, y), mn_z = min(mn_z, z);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x + mn_x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y + mn_y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z + mn_z &lt; <span class="number">3</span>; z ++)</span><br><span class="line">					ret.a[x][y][z] = a[x+mn_x][y+mn_y][z+mn_z];</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">equal</span> <span class="params">(Cube b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++)</span><br><span class="line">					<span class="keyword">if</span> (a[x][y][z] != b.a[x][y][z])</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">by_all_means_equal</span> <span class="params">(Cube base)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//a &#x27;by_all_means_equal&#x27; b ==&gt; Cube a can become b by rotation</span></span><br><span class="line">		<span class="built_in">vector</span> &lt;Cube&gt; all = all_Cubes();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all.size(); i ++)</span><br><span class="line">			<span class="keyword">if</span> (all[i].simplify().equal(base.simplify()))</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span> &lt;Cube&gt; Cubes;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this structure stores all possible positions of certain piece.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pieces</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> color;</span><br><span class="line">	Cubes shape, cand;</span><br><span class="line">	Pieces () &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(Cube cube, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!num) &#123;</span><br><span class="line">			cand.push_back(cube);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; z ++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (cube.a[x][y][z])</span><br><span class="line">						<span class="keyword">return</span> ;</span><br><span class="line">					cube.a[x][y][z] = color;</span><br><span class="line">					dfs (cube, num - <span class="number">1</span>);</span><br><span class="line">					cube.a[x][y][z] = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Pieces (<span class="keyword">int</span> c, <span class="keyword">int</span> num, Cube init) &#123;</span><br><span class="line">		color = c;</span><br><span class="line">		dfs (Cube(), num);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cand.size(); i ++)</span><br><span class="line">			<span class="keyword">if</span> (cand[i].by_all_means_equal(init))</span><br><span class="line">				shape.push_back(cand[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// seven kinds of pieces</span></span><br><span class="line">Pieces Tri  =	Pieces(<span class="number">1</span>, <span class="number">3</span>, Cube(<span class="number">1</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)));</span><br><span class="line">Pieces Hat  =	Pieces(<span class="number">2</span>, <span class="number">4</span>, Cube(<span class="number">2</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>)));</span><br><span class="line">Pieces L    =	Pieces(<span class="number">3</span>, <span class="number">4</span>, Cube(<span class="number">3</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>)));</span><br><span class="line">Pieces IZ   =	Pieces(<span class="number">4</span>, <span class="number">4</span>, Cube(<span class="number">4</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>)));</span><br><span class="line">Pieces Cnr  =	Pieces(<span class="number">5</span>, <span class="number">4</span>, Cube(<span class="number">5</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)));</span><br><span class="line">Pieces TriL = 	Pieces(<span class="number">6</span>, <span class="number">4</span>, Cube(<span class="number">6</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>)));</span><br><span class="line">Pieces TriR = 	Pieces(<span class="number">7</span>, <span class="number">4</span>, Cube(<span class="number">7</span>, Co(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), Co(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), Co(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)));</span><br><span class="line">Cubes all_shapes[<span class="number">7</span>] = &#123;Cnr.shape, Hat.shape, IZ.shape, TriL.shape, TriR.shape, L.shape, Tri.shape&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Cubes final_ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count_dfs = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(Cube cube, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// if ((++count_dfs) % 1000000 == 0)</span></span><br><span class="line">		<span class="comment">// cerr &lt;&lt; &quot;searching...&quot; &lt;&lt; count_dfs &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">if</span> (l == <span class="number">7</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; final_ans.size(); i ++)</span><br><span class="line">			<span class="keyword">if</span> (cube.by_all_means_equal(final_ans[i]))</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">		final_ans.push_back(cube);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all_shapes[l].size(); i ++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!l)</span><br><span class="line">			<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;searching first layer: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; ...&quot;</span> &lt;&lt; TIME &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (cube.add(all_shapes[l][i])) &#123;</span><br><span class="line">			dfs (cube, l + <span class="number">1</span>);</span><br><span class="line">			cube.sub(all_shapes[l][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	dfs (Cube(), <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;search finished&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;answer size: &quot;</span> &lt;&lt; final_ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; final_ans.size(); i ++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;solution #&quot;</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		final_ans[i].output();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES201 Homework0</title>
    <url>/2020-06-04-taichi-gui.html</url>
    <content><![CDATA[<p>来记录一下你用太极编写的第一个程序吧！</p>
<a id="more"></a>
<h3 id="成品展示："><a href="#成品展示：" class="headerlink" title="成品展示："></a>成品展示：</h3><p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/out2.gif" alt="这里应该有图片"></p>
<p>在Windows环境下，用Taichi GUI生成连续图片，并用ffmpeg合成的gif图。</p>
<h3 id="用taichi生成图片"><a href="#用taichi生成图片" class="headerlink" title="用taichi生成图片"></a>用taichi生成图片</h3><p>这个程序只用到了taichi的一些基本操作。包括一些基本函数和GUI的用法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> taichi <span class="keyword">as</span> ti</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialization</span></span><br><span class="line">ti.init (arch = ti.gpu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allocation</span></span><br><span class="line">n = <span class="number">512</span></span><br><span class="line"><span class="comment"># pixels = ti.var(dt=ti.f32, shape=(n * 2, n))</span></span><br><span class="line">pixels = ti.Vector(<span class="number">3</span>, dt=ti.f32, shape=(n, n))</span><br><span class="line">PI = <span class="number">3.1415926535898</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Computation</span></span><br><span class="line"><span class="meta">@ti.func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span> (<span class="params">i:ti.f32, j:ti.f32, t:ti.f32, x:ti.i32, y:ti.i32</span>):</span></span><br><span class="line">	ii = (ti.cos(ti.cast(i, ti.f32))+<span class="number">1</span>)*<span class="number">0.5</span></span><br><span class="line">	jj = (ti.cos(ti.cast(j, ti.f32))+<span class="number">1</span>)*<span class="number">0.5</span></span><br><span class="line">	tt = (ti.cos(t)+<span class="number">1</span>)*<span class="number">0.5</span></span><br><span class="line">	r = (ii-jj*<span class="number">2</span>+tt+<span class="number">3</span>)</span><br><span class="line">	g = (-ii*<span class="number">2</span>+jj+tt+<span class="number">3</span>)</span><br><span class="line">	b = (ii+jj-tt*<span class="number">2</span>+<span class="number">3</span>)</span><br><span class="line">	<span class="keyword">while</span> r&gt;<span class="number">1</span>:</span><br><span class="line">		r -= <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> g&gt;<span class="number">1</span>:</span><br><span class="line">		g -= <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> b&gt;<span class="number">1</span>:</span><br><span class="line">		b -= <span class="number">1</span></span><br><span class="line">	pixels[x, y] = [r, g, b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ti.kernel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paint</span>(<span class="params">t: ti.f32</span>):</span></span><br><span class="line">	<span class="keyword">for</span> i, j <span class="keyword">in</span> pixels:  <span class="comment"># Parallized over all pixels</span></span><br><span class="line">		<span class="comment"># pixels[i, j] = [i/n, j/n, (ti.cos(t)+1)*0.5]</span></span><br><span class="line">		func(i/n*<span class="number">2</span>*PI, j/n*<span class="number">2</span>*PI, t/<span class="number">512</span>*<span class="number">2</span>*PI, i, j)</span><br><span class="line"></span><br><span class="line">gui = ti.GUI(<span class="string">&quot;Julia Set&quot;</span>, res=(n, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>):</span><br><span class="line">	paint(i)</span><br><span class="line">	gui.set_image(pixels.to_numpy())</span><br><span class="line">	<span class="comment"># gui.show()</span></span><br><span class="line">	gui.show(<span class="string">f&#x27;frame/<span class="subst">&#123;i:04d&#125;</span>.png&#x27;</span>)</span><br><span class="line">	<span class="comment"># if i==100:</span></span><br><span class="line">		<span class="comment"># gui.show(&#x27;test.jpg&#x27;)</span></span><br></pre></td></tr></table></figure>
<h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><ul>
<li>init的时候，选gpu就好</li>
<li>震惊的发现，@ti.func函数的变量类型，由实参而非形参决定。换句话说，一个ti.i32的变量传入ti.f32的形参，它在函数里被用的时候，还是i32的。</li>
<li>gui.set_image()接受的参数有几种，详见API。但是接受Vector Tensor时，必须用$.to_numpy()$转化一步…</li>
<li>gui.show()接受名称参数，$f’FILE_NAME$为文件夹, $\{i:04d\}$可以设置输出格式。</li>
</ul>
<h3 id="ffmpeg的一些操作"><a href="#ffmpeg的一些操作" class="headerlink" title="ffmpeg的一些操作"></a>ffmpeg的一些操作</h3><ul>
<li>ffmpeg已经下载在家里的电脑里了。<a href="ffmpeg.zeranoe.com/builds/">或者看这里</a></li>
<li>图片转gif的神奇操作其实是和<a href="https://forum.taichi.graphics/t/homework-0-new-shader-ffmpeg-gif/469">这位老哥</a>学的。</li>
<li>图片转mp4:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -framerate 60 -i ./frame/%04d.png -c:v libx264 -r 30 out.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li>mp4转gif:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00 -t 5 -i out.mp4 -vf &quot;fps&#x3D;25,scale&#x3D;320:-1:flags&#x3D;lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&quot; -loop 0 out.gif</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>gif还是很漂亮的～</p>
]]></content>
      <categories>
        <category>Graphics</category>
        <category>Taichi</category>
      </categories>
      <tags>
        <tag>Taichi</tag>
        <tag>GAMES201</tag>
      </tags>
  </entry>
  <entry>
    <title>ByteCamp_day3_L</title>
    <url>/2020-05-03-ByteCamp-day3-L.html</url>
    <content><![CDATA[<p>在贫瘠的草原上，寻找花的种子。</p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>定义biggest_digit(A)为A在10进制下最大的一个位的值。</p>
<p>求A在经过n次 $A:=biggest_digit(A)%m$ 运算之后的值。</p>
<a id="more"></a>
<h3 id="本质信息与套路"><a href="#本质信息与套路" class="headerlink" title="本质信息与套路"></a>本质信息与套路</h3><ul>
<li>找规律啊，找一些<strong>不变的量</strong>啊。</li>
<li>这种题不是枚举玄学优化，就是DP。</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
      </tags>
  </entry>
  <entry>
    <title>ByteCamp_day3_G</title>
    <url>/2020-05-03-ByteCamp-day3-G.html</url>
    <content><![CDATA[<p>穿越晨雾。</p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定A，不断复制自身得到无限串T。</p>
<p>给定字符串集S。求至少用其中的多少个串，才能拼成B，使得B不断复制自身后得到T。</p>
<a id="more"></a>
<h3 id="本质信息与套路"><a href="#本质信息与套路" class="headerlink" title="本质信息与套路"></a>本质信息与套路</h3><ul>
<li>先找出A的最小循环节a，这是我们要拼成的关键信息。</li>
<li>发现“S拼成了几个a”是无用信息。</li>
<li><strong>$S_i$”从a的哪个位置开始，哪个位置结束”是关键信息</strong>。<strong>因为，这件事唯一决定了它该怎么被用，对答案有什么贡献。</strong></li>
<li>建图求环</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
      </tags>
  </entry>
  <entry>
    <title>ByteCamp_day3_A</title>
    <url>/2020-05-03-ByteCamp-day3-A.html</url>
    <content><![CDATA[<p>在迷雾中前行。</p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>Given n (1 &lt;= n &lt;= 1000), k (0 &lt;= k &lt;= $\frac{n*(n-1)}{2}$),  x (2 &lt;= x &lt;= 1000). Construct an n-element array, satisfying:</p>
<ol>
<li>All elements are smaller than $10^6$</li>
<li>There are <strong>exactly</strong> k unordered pairs of different indices (i, j) such that $|A_i-A_j| &gt;= x$</li>
</ol>
<a id="more"></a>
<h3 id="本质信息"><a href="#本质信息" class="headerlink" title="本质信息"></a>本质信息</h3><ul>
<li>可以把数组分成不相干的一些部分，使得部分之间有贡献，部分中无贡献。</li>
</ul>
<h3 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h3><ul>
<li>增量构造！！！！</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
      </tags>
  </entry>
  <entry>
    <title>Certificate Verification</title>
    <url>/2020-04-28-decoder.html</url>
    <content><![CDATA[<p>Every cerfificate offered by the SDSZ Mathematics Office has an unique code that satisfies certain cryptographical patterns. <a id="more"></a> If you want to check whether or not your certificate is legitimate, download the program below and type in the code.</p>
<h4 id="Instruction-for-running-decoder-on-Mac"><a href="#Instruction-for-running-decoder-on-Mac" class="headerlink" title="Instruction for running decoder on Mac:"></a>Instruction for running decoder on Mac:</h4><p><a href="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/decoder_Mac">Decoder_Mac</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.Download the program.</span><br><span class="line">1.Open the terminal (google if confused).</span><br><span class="line">2.Go to the &quot;Downloads&quot; folder by typing in command &quot;cd Downloads&quot;.</span><br><span class="line">3.Give computer the permission to run decoder by typing in command &quot;chmod +x decoder_Mac&quot;.</span><br><span class="line">4.Run the decoder program by typing in command &quot;.&#x2F;decoder_Mac&quot;.</span><br></pre></td></tr></table></figure>
<h4 id="Instruction-for-running-decoder-on-Windows"><a href="#Instruction-for-running-decoder-on-Windows" class="headerlink" title="Instruction for running decoder on Windows:"></a>Instruction for running decoder on Windows:</h4><p><a href="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/decoder_Windows.exe">Decoder_Windows</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.Download the program.</span><br><span class="line">1.Double click to run it.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>CR633C</title>
    <url>/2020-04-23-Codeforces-CR633-C.html</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>Consider the infinite sequence $s$ of positive integers, created by repeating the following steps:</p>
<ol>
<li>Find the lexicographically smallest triple of positive integers (a,b,c) such that: <ul>
<li>$a⊕b⊕c=0$, where $⊕$ denotes the bitwise XOR operation.</li>
<li>$a$, $b$, $c$ are not in s.</li>
</ul>
</li>
<li>Append $a$, $b$, $c$ to $s$ in this order.</li>
<li>Go back to the first step.</li>
</ol>
<p>You have integer $n$. Find the n-th element of $s$. You have to answer $t$ independent test cases.</p>
<a id="more"></a>
<h3 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h3><ul>
<li>Construction</li>
<li>Recursion</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n, m;</span><br><span class="line">ll a, b, c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t -- )&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		</span><br><span class="line">		m = (n - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">		ll len = <span class="number">1</span>, bef = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (m &gt; len + bef) &#123;</span><br><span class="line">			bef += len;</span><br><span class="line">			len *= <span class="number">4</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ll ord = m - bef - <span class="number">1</span>;</span><br><span class="line">		a = len + ord;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> r[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">		ll weight = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (ord) &#123;</span><br><span class="line">			sum += weight * r[ord % <span class="number">4</span>];</span><br><span class="line">			ord /= <span class="number">4</span>;</span><br><span class="line">			weight *= <span class="number">4</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		b = len * <span class="number">2</span> + sum;</span><br><span class="line">		c = a ^ b;</span><br><span class="line">		<span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>)	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>)	<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>)	<span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3><p>在考场上，你还算比较聪明：<strong>打表，找规律</strong>。</p>
<p>当找到规律以后，立刻将规律<strong>形式化</strong>，并想出<strong>最快的实现方法</strong>。</p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>Construction</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
        <tag>Construction</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>线性基算法整理</title>
    <url>/2020-04-19-LinearBase.html</url>
    <content><![CDATA[<p>线性基是向量空间的一组基，常用来解决<strong>子集异或</strong>一类题目的算法。</p>
<a id="more"></a>
<h3 id="线性基的定义"><a href="#线性基的定义" class="headerlink" title="线性基的定义"></a>线性基的定义</h3><h4 id="异或和"><a href="#异或和" class="headerlink" title="异或和"></a>异或和</h4><p>设S为无符号整数集，定义其异或和 xor-sum(S) = $S_1 xor S_2 … xor S_{|S|}$</p>
<h4 id="张成"><a href="#张成" class="headerlink" title="张成"></a>张成</h4><p>设集合$T \subseteq S$，所有这样的子集$T$的异或和组成的集合称为集合$S$的<strong>张成</strong>，记作 $span(S)$。即，在$S$中选出任意多个数，其异或和的所有可能的结果组成的集合。</p>
<h4 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h4><p>对于一个集合$S$，如果存在$S_j$使$span(S) == span(S$  $S_j)$，则称S线性相关。</p>
<h4 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h4><p>我们称集合$B$是$S$的线性基，当且仅当：</p>
<ul>
<li>$S \subseteq span(B)$</li>
<li>B是线性无关的</li>
</ul>
<p>$|B|$称为线性基的长度。</p>
<h3 id="线性基的构造方法"><a href="#线性基的构造方法" class="headerlink" title="线性基的构造方法"></a>线性基的构造方法</h3><h4 id="构造一个普通的线性基"><a href="#构造一个普通的线性基" class="headerlink" title="构造一个普通的线性基"></a>构造一个普通的线性基</h4><p>已知集合S，其中每个元素均小于$2^m$。不失一般性的，对于每一个二进制位i，我们假设有B中有至多一个元素与其对应，我们称其为$b_i$。初始状态下，$b_i=0$，$\forall i \in [0, m)$。</p>
<p>每加入一个元素$x$，将其从大到小遍历每个二进制位：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; x; i --)</span><br><span class="line">			<span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">if</span> (!b[i])	&#123;b[i] = x; <span class="keyword">break</span>;&#125;</span><br><span class="line">				<span class="keyword">else</span>				x ^= b[i];</span><br><span class="line"><span class="comment">// &quot;&gt;&gt;&quot; will be processed prior to &#x27;&amp;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="构造一个有特殊性质的线性基"><a href="#构造一个有特殊性质的线性基" class="headerlink" title="构造一个有特殊性质的线性基"></a>构造一个有特殊性质的线性基</h4><p>易知，一个集合S可以有很多组等价的线性基。这促使我们思考，我们可否让构造出的线性基拥有更好的结构。</p>
<p>我们用类似高斯消元的方法，可以让线性基的关键位(有B中元素对应的位)只有一个元素为1.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; x; i --)</span><br><span class="line">			<span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!b[i]) &#123;</span><br><span class="line">					b[i] = x;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j --)	<span class="keyword">if</span> (b[i] &gt;&gt; j &amp; <span class="number">1</span>)	b[i] ^= b[j];</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt; i; j --)	<span class="keyword">if</span> (b[j] &gt;&gt; i &amp; <span class="number">1</span>)	b[j] ^= b[i];</span><br><span class="line">					<span class="keyword">return</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					x ^= b[i];</span><br><span class="line">			&#125;</span><br><span class="line"><span class="comment">//ATTENTION: those two &quot;for&quot; must not be switched</span></span><br></pre></td></tr></table></figure>
<p>如果线性基的长度为m，那么写成矩阵的话，这个线性基就是对角矩阵$D_m$。</p>
<p>一般来说，我们都会构造有特殊性质的线性基。</p>
<h4 id="线性基的合并"><a href="#线性基的合并" class="headerlink" title="线性基的合并"></a>线性基的合并</h4><p>合并只需要将一个线性基中的所有元素插入到另一个线性基中即可，时间复杂度为$O(m^2)$。</p>
<h3 id="线性基的进阶性质"><a href="#线性基的进阶性质" class="headerlink" title="线性基的进阶性质"></a>线性基的进阶性质</h3><h4 id="方案数"><a href="#方案数" class="headerlink" title="方案数"></a>方案数</h4><p>对于集合$S$及其线性基$B$，$\forall v \in span(B)$，异或和为v的方案数为$2^{|S| - |B|}$。</p>
<h3 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h3><p><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/LB1.jpeg" alt="两年前的笔记1"><br><img src="https://simulated-anneal.oss-cn-beijing.aliyuncs.com/LB2.jpeg" alt="两年前的笔记2"></p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>LinearBase</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>LinearBase</tag>
        <tag>ALgorithm Summaries</tag>
      </tags>
  </entry>
  <entry>
    <title>CR635E解题报告</title>
    <url>/2020-04-19-Codeforces-CR635-E.html</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>Given $n$ numbers belonging to $[0, 2^m)$. For each $i \in [0, m]$, compute the number of ways to pick numbers, such that their xor sum has $i$ 1-bits in the binary representation (i.e., $popcount(xor_sum) = i$). Modulo the answer by 998244353.</p>
<p>$n \leq 2*10^5, m \leq 35$.</p>
<a id="more"></a>
<h3 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h3><ul>
<li>异或线性基</li>
<li>状压DP</li>
<li>神奇的状压DP优化方法</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>The Problem Statement should immediately reminds you of <strong>Linear Base</strong>. 问题被转化为了：对于所有i，用线性基能构造出的popcount(x)=i的x有多少个？将结果乘以$2^{n - x}$就是答案。</p>
<h4 id="Trivial-Algorithm-1"><a href="#Trivial-Algorithm-1" class="headerlink" title="Trivial Algorithm 1"></a>Trivial Algorithm 1</h4><p>Find $span(S)$，enumerate and popcount each element.</p>
<p>Time Complexity: $O(2^x * m)$，where $x$ is the length of S’s Linear Base.</p>
<h4 id="Trivial-Algorithm-2"><a href="#Trivial-Algorithm-2" class="headerlink" title="Trivial Algorithm 2"></a>Trivial Algorithm 2</h4><p>What if $x$ is too big? According to the feature of linear base, all the binary digit i in $x$ is only influenced by $b_i$. For the digit outside $x$, we can use bitmask DP to record their value.</p>
<p>Combining Algorithm 1 and 2, we can solve all the cases.</p>
<h4 id="HZK’s-Algorithm"><a href="#HZK’s-Algorithm" class="headerlink" title="HZK’s Algorithm"></a>HZK’s Algorithm</h4><p>m=35？如果我们能将dp分成$S_1$，$S_2$两部分，各自的复杂度都是$O(2^{m/2})$，并且满足$S_1$对$S_2$有影响，$S_2$对$S_1$无影响，那么我们就可以解决问题。</p>
<ul>
<li>$S_1$：枚举所有满足$i \geq m/2$且$b_i \neq 0$的$b_i$是否被选。将结果记录在$dp[number][mask]$中，代表“前$m/2$位的popcount为number，后m/2位的状态为mask的选法有多少个”。时间复杂度为$O(2^{m/2}*m)$</li>
<li>$S_2$：遍历$i \leq m/2$且$b_i \neq 0$的$b_i$，更新dp数组。时间复杂度为$O(2^{m/2}*m^2)$。</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popcount</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> (x&amp;<span class="number">1</span>)+popcount(x&gt;&gt;<span class="number">1</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll a[<span class="number">200020</span>], pow2[<span class="number">200020</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LinearBase &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxLen = <span class="number">37</span>;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>, spare;</span><br><span class="line">	ll b[maxLen];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; x; i --)</span><br><span class="line">			<span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!b[i]) &#123;</span><br><span class="line">					num ++;</span><br><span class="line">					b[i] = x;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j --)</span><br><span class="line">						<span class="keyword">if</span> (b[i] &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">							b[i] ^= b[j];</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt; i; j --)</span><br><span class="line">						<span class="keyword">if</span> (b[j] &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">							b[j] ^= b[i];</span><br><span class="line">					<span class="keyword">return</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					x ^= b[i];</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">extract</span> <span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++, x &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (b[i]) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				(ans *= <span class="number">2</span>) += (x &amp; <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">using</span> <span class="keyword">namespace</span> LinearBase;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">2</span>][maxLen][<span class="number">1</span>&lt;&lt;<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">ll fans[maxLen];</span><br><span class="line">ll pans[maxLen];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> id, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (id == m) &#123;</span><br><span class="line">		pans[popcount(x)] ++;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs (id + <span class="number">1</span>, x);</span><br><span class="line">	<span class="keyword">if</span> (b[id])</span><br><span class="line">		dfs (id + <span class="number">1</span>, x ^ b[id]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200000</span>; i ++)</span><br><span class="line">		pow2[i] = pow2[i - <span class="number">1</span>] * <span class="number">2</span> % mod;</span><br><span class="line">	<span class="built_in">memset</span> (b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		add (a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (num &lt;= <span class="number">23</span>) &#123;</span><br><span class="line">		dfs (<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i ++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; pans[i] * pow2[n - num] % mod &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	spare = (<span class="number">1ll</span> &lt;&lt; (m - num + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">bool</span> ter = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">		<span class="keyword">if</span> (b[i]) &#123;</span><br><span class="line">			<span class="keyword">int</span> v = extract(b[i]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= num; j ++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; spare; k ++) &#123;</span><br><span class="line">					dp[ter][j][k] = dp[ter ^ <span class="number">1</span>][j][k];</span><br><span class="line">					<span class="keyword">if</span> (j)</span><br><span class="line">						(dp[ter][j][k] += dp[ter ^ <span class="number">1</span>][j - <span class="number">1</span>][k ^ v]) %= mod;</span><br><span class="line">				&#125;</span><br><span class="line">			ter ^= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span> (fans, <span class="number">0</span>, <span class="keyword">sizeof</span> fans);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= num; j ++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; spare; k ++)</span><br><span class="line">			(fans[j + popcount(k)] += dp[ter ^ <span class="number">1</span>][j][k]) %= mod;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">		(fans[i] *= pow2[n - num]) %= mod;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; fans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3><p>首先，这道题目让你温习了线性基的知识点。一点也不难写，但需要你注意一些细节：</p>
<ol>
<li>线性基新加一位的时候别忘记return</li>
<li>线性基消元时注意顺序。先消自己，再消别人。</li>
<li>记住”x &gt;&gt; i &amp; 1”的写法呗。</li>
</ol>
<p>其次，这道题目也让你对dp的状态有了更加灵活的思考。开大规模的状态(比如mask)是迫不得已的，因为他们彼此有影响，必须分离。但是有些时候，特殊的性质使得<strong>DP的有些变量仅存在单向的影响关系，或者有些变量彼此无关</strong>，此时可以考虑重新设计DP状态，<strong>利用无关的变量合并状态</strong>。特殊地，在这道题中，正解利用的是”线性基中无效位不会影响有效位，而且有效位之间互相无关”的性质，HZK利用的是“线性基中大的有效位不会影响小的有效位”的性质。</p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>LinearBase</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
        <tag>DP</tag>
        <tag>LinearBase</tag>
        <tag>MeetinMiddle</tag>
      </tags>
  </entry>
  <entry>
    <title>CR635D解题报告</title>
    <url>/2020-04-18-Codeforces-CR635-D.html</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有$n$种标号为1到n的小球，每种有0-n个，初识个数未知。每次操作，输入标号i，交互库会增加一个标号为i的小球，并返回三元对<strong>triplet = [x, x, x]</strong>与<strong>straight = [x - 1, x, x + 1]</strong>的个数。请在n次操作内，求出每种小球的初始个数。</p>
<a id="more"></a>
<h3 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h3><ul>
<li>交互题</li>
<li>构造题</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><strong>思考核心线索：如何能通过询问组合得知一种球的个数？</strong></p>
<ol>
<li>询问一个球两次。(第二次区分出了0/1的情况)通过triplet。</li>
<li>询问标号x，然后标号x + 1，然后标号x。即可得到x+2的个数。</li>
<li>因为$\Delta straight_i = a_{i-2}a_{i-1} + a_{i-1}a_{i+1} + a_{i+1}a_{i+2}$，在知道这四个变量中的任意三个时，即可解方程求出另一个。(<strong>重点：需要保证未知数的系数非零。</strong>)</li>
<li><strong>在$a_{n-1} \neq 0$时，</strong>若只有$a_n$未知，则可以直接得出。</li>
</ol>
<p>正解构造：依次询问n-1, n-2, …, 5, 4, 3, 1, 2, 1。</p>
<p>通过后三个可求出1和2的个数。</p>
<p>对于任意的x ($x \geq 1$)，我们已知$a_{x+1}$，$a_{x}$，以及之前的所有值。易知$a_{x + 1}\neq 0$。我们可以通过$\Delta straight_i = a_{x-2}a_{x-1} + a_{x-1}a_{x+1} + a_{x+1}a_{x+2}$求出$a_{x+2}$的值，递归下去。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s1, s2, t1, t2, d1[<span class="number">105</span>], d2[<span class="number">105</span>], a[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;+ &quot;</span> &lt;&lt; (i &gt; <span class="number">2</span> ? i : i % <span class="number">2</span> + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        t1 = s1; t2 = s2; <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        d1[i] = s1 - t1; d2[i] = s2 - t2;</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="built_in">sqrt</span>(d1[<span class="number">0</span>] * <span class="number">2</span>);</span><br><span class="line">    a[<span class="number">3</span>] = d2[<span class="number">0</span>] - d2[<span class="number">2</span>] - <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = d2[<span class="number">2</span>] / (a[<span class="number">3</span>] + <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">4</span>] = d2[<span class="number">1</span>] / (a[<span class="number">3</span>] + <span class="number">1</span>) - a[<span class="number">1</span>] - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = (d2[i - <span class="number">2</span>] - a[i - <span class="number">4</span>] * a[i - <span class="number">3</span>]) / (a[i - <span class="number">1</span>] + <span class="number">1</span>) - a[i - <span class="number">3</span>] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;!&quot;</span>; a[n]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i]; &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3><p>不要漫无目的地乱想题目…这道题的<strong>核心线索</strong>很明确，正解构造也就是基于核心线索而来的。而你在思考的时候，没有把它作为核心，导致没有想清楚所有的可能性。</p>
<p>你想出了失败的构造方法，要总结它<strong>失败在哪里</strong>。你想的方法的缺陷很显然：特定的值如果是零，你的方法就没戏了。所以，如果你能总结出<strong>在解straight方程的时候要让系数非零</strong>这个结论，你离正解的构造就很近了。</p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>交互题</category>
        <category>Construction</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
        <tag>Construction</tag>
        <tag>交互题</tag>
        <tag>增量法</tag>
      </tags>
  </entry>
  <entry>
    <title>Oxford 印象</title>
    <url>/2020-04-17-Oxford-CS.html</url>
    <content><![CDATA[<p>最近没事闲逛Quora&amp;CollegeConfidential，看了很多很多关于牛津的评价。还是做做记录吧，不然就都忘了。</p>
<a id="more"></a>
<h4 id="In-comparison-to-Stanford-or-MIT-how-are-Oxford-and-Cambridge-in-computer-science"><a href="#In-comparison-to-Stanford-or-MIT-how-are-Oxford-and-Cambridge-in-computer-science" class="headerlink" title="In comparison to Stanford or MIT, how are Oxford and Cambridge in computer science?"></a><a href="https://www.quora.com/In-comparison-to-Stanford-or-MIT-how-are-Oxford-and-Cambridge-in-computer-science#">In comparison to Stanford or MIT, how are Oxford and Cambridge in computer science?</a></h4><blockquote>
<p>…<br>To rephrase that last paragraph, as an undergraduate you have some of the top experts in the world available for teaching in lectures, as well as the supervision system (tutorials in Oxford) which is the best in the world (please note: 2 supervisions per week, for an hour only, including preparation 10+ hours, but not a full week). You get to think, aloud, too.</p>
<p>So to try to summarize: my impression of MIT is that it teaches technologies and skills. Cambridge, on the other hand, introduces you to as many different important subjects as you can deal with, and although the exams are tough they are also somewhat forgiving, particularly for the diploma in my time.</p>
</blockquote>
<h4 id="Should-I-apply-to-Cambridge-or-Oxford-for-computer-science"><a href="#Should-I-apply-to-Cambridge-or-Oxford-for-computer-science" class="headerlink" title="Should I apply to Cambridge or Oxford for computer science?"></a><a href="https://www.quora.com/Should-I-apply-to-Cambridge-or-Oxford-for-computer-science">Should I apply to Cambridge or Oxford for computer science?</a></h4><blockquote>
<p>The two are characterized by their similarities far more than their differences, and the computer science courses of Oxford and Cambridge are pretty similar in structure. It’s hard to make an especially wrong choice here.</p>
<p>The most obvious difference is that Oxford has two joint honours degrees, Maths &amp; Computer Science and Computer Science &amp; Philosophy. Cambridge doesn’t offer any joint honours courses with computer science, but in your first year you can sit some papers from the Natural Sciences degree and/or a social psychology paper, or you can sit two maths papers your first year in the “Computer Science with Mathematics” choice.  This structural difference might be important to you. For me, the lack of a Maths &amp; Computer Science course at Cambridge made it an easy choice to apply to Oxford, and this was also true for many other people doing this course that I’ve talked to.</p>
<p>Another difference is the size of the departments. Cambridge takes around 90 undergraduates each year for Computer Science; Oxford takes about half of that (including the joint courses). As a consequence, Cambridge probably offers more courses/modules, simply due to the larger scale. On the flip side, the small size of the Oxford department gives it a quite cozy, friendly feel; it seems much more unified than the larger departments.</p>
<p>One significant difference is the actual courses available. It’s a bit dangerous to choose a university because of one or two specific courses, since these things can change and the courses could vanish. With that said, Cambridge has a bunch of more applied/“soft” options (Bioinformatics, Business Studies, E-Commerce, “Economics, Law, and Ethics”, Software Engineering, etc.) which you won’t find at Oxford. Cambridge also seems to have quite a few hardware-focused courses (ECAD and Architecture, Human-Computer Interaction, Computer Vision, System-on-Chip Design, Mobile and Sensor Systems, etc.) which you won’t really find at Oxford either. By contrast, Oxford’s department is very theory-focused— far more so than most or maybe even all American departments, for instance. That’s not to say Cambridge doesn’t have theoretical courses as well (it does, and quite a few of them at that). But it’s something you might keep in mind when deciding between the two.</p>
<p>But, of course, the academics are only one part of the picture. You should consider other factors too. I agree with the suggestion to visit the two if possible, and to also think about which college you’d apply to. I agree with Michael M. Ross that your college is the most important factor in your experience, simply because it’s the context in which most of your teaching and socializing will probably take place. But on the other hand, it’s pretty much impossible to predict what your college experience will be like. It’s also pretty hard to go wrong and you’ll end up loving whichever college you end up at. Because of that, I don’t think college choice is a very useful thing to consider that much. I wouldn’t worry about it unless you have specific concerns (want to play on a particular college sports team or something). The colleges at both universities are pretty comparable anyway.</p>
<p>As I said at the beginning of this answer, Oxford and Cambridge are overall very similar. You need to decide between them somehow, so of course consider all the factors. At the same time, I don’t think it’s something worth spending too much time stressing over.</p>
<p>Best of luck!</p>
</blockquote>
<h4 id="What-is-it-like-to-study-computer-science-at-Oxford-University"><a href="#What-is-it-like-to-study-computer-science-at-Oxford-University" class="headerlink" title="What is it like to study computer science at Oxford University?"></a><a href="https://www.quora.com/What-is-it-like-to-study-computer-science-at-Oxford-University">What is it like to study computer science at Oxford University?</a></h4><blockquote>
<p>It’s a mixed bag, in my opinion.</p>
<p>I, like most of my classmates, started Oxford computer science straight after school at age 18, so it comprised my first three years of independence as an adult. Living away from home in a pleasant setting with like-minded people was great. I learned a lot outside my discipline just from conversations over tea, which I really valued. The people I was with were the most similar to me of any group I’d been in before, but the collegiate structure of the University means that one lives with others studying a wide range of subjects, which keeps conversations interesting. It’s common to stay up into the early hours of the morning having a heated debate over some issue (abortion, free will, etc).</p>
<p>I think most of the standard positive points about university apply: I made good friends; I grew a lot personally, and so on. Oxford is also a great setting for all of this. The city is small enough to walk most places in well under ten minutes, and big enough that it feels like there are things going on other than the University.</p>
<p>The actual degree in computer science, however, is pretty poor, in my opinion. The lectures suffer the widely-recognised problems that are inherent to the format, but the Department of Computer Science goes one step further and provides, in most cases, LaTeX beamer slides read out in a monotone voice by someone who may or may not actually understand what they are reading (we know this from asking questions which other students can answer but the lecturer can’t).</p>
<p>The first year-and-a-bit of the course features one-on-two tutorials, the merits of which have been covered elsewhere, and which I also found valuable. Then, those tutorials are replaced by larger classes which range from “acceptable” to “total shambles”. In my second year I started the computer graphics course but quit after the classes turned out to be an absolute Comedy of Errors, with the teacher incapable of using even the simplest relevant techniques. For example, he couldn’t work out what matrices could be used to scale vectors! According to its own website, “Oxford’s intensive teaching style is intellectually challenging, and leads to a world-class education.” Not in the Department of Computer Science.</p>
<p>In the third year of the degree there is a research project where students work with members of the Department on original research. Credit where it’s due: this is great. I’ve heard stories of supervisors not replying to emails for weeks, ignoring the students they’re responsible for, but that didn’t happen to me — my supervisors were extremely professional, and, to be honest, were probably more on top of my project than I was (although I of course did the work).</p>
<p>Another issue with the degree itself is the price tag. In practical terms, this isn’t an issue (for the student, as long as they’re within the EU), because a student loan can cover the cost, and the terms ensure that students only ever pay the loan back at a rate they can afford. But charging £27,000 (about $42,000 as of July 2015) for a degree inexorably leads to it being viewed as a product, and I think it’s clear from the experiences I outlined above that the computer science degree represents unbelievably bad value for money. The fee works out to £375 per week, and I can’t see any way to reconcile that price with the quality on offer. A subtlety here is that Oxford computer science graduates are extremely employable, and earn a lot more money, on average, than those without a degree. But correlation doesn’t imply causation, and I think the employability has a lot more to do with being admitted by the University than it has to do with being taught by it.</p>
<p>Overall, I think if you can get an offer, and you take it up, you’ll probably have a fun, rewarding, and memorable three years, but I think that’s in spite of the formal teaching provisions, not because of them.</p>
<p>Without a doubt, studying Computer Science at Oxford has been the best experience of my life.</p>
<p>Oxford consistently ranks top 10 in the world for CS.  The course is amazing, the people are really fun and I’m going to make a ton of money.</p>
<p>The academic course</p>
<p>The 3 year Bachelor in CS course is incredibly well designed.  It doesn’t bend to the latest fad or fashion, instead, Oxford students are taught the principles behind whatever technology we’re using.  The idea is that if you need a new language, you can pick it up in an afternoon.  (This was super helpful when I started at Palantir and needed to learn CoffeeScript straight away).</p>
<p>Two-on-one tuition is the highlight of the Oxford experience: you meet with your incredibly knowledgable tutor on a weekly basis.  In a tutorial, you explore the most interesting questions from that week and the tutor hones in on anything you don’t understand. (These expand to 10-person classes for specialist subjects.)</p>
<p>Oxford teaches you computer science from day one and the course encompasses all facets of CS.  It covers functional programming, assembly code, concurrent algorithms, machine learning, linear algebra, compilers, OOP and networks just to name a few [full list here].</p>
<p>Oxford didn’t waste my time on things I could learn myself.  For example, there is no course on javascript or web development, there’s nothing on Objective-C or Swift.  Instead, Oxford teaches you what closures, pointers, garbage collection and heaps are so that when you want to learn a language, you already understand all the concepts.</p>
<p>At the end of the course, you can pretty much work wherever you want.  The Sunday Times found that Oxford computer scientists “were earning an average of £43,895 six months after graduating” [Sunday Times article].  You can get a silicon valley internship in your first summer and my friends have ended up at Palantir, Google, Facebook, Quora etc.</p>
<p>Life outside CS</p>
<p>Oxford colleges are basically Hogwarts houses.  I chose Magdalen, which accepts about 120 students a year (4 of whom study CS).  They provide meals and accommodation and have thriving clubs &amp; societies.  Magdalen is also stunningly beautiful.</p>
<p>Terms are 8 weeks long.  There are three terms in a year.  That means you have a ridiculous amount of vacation each year.</p>
<p>Unlike some American colleges, I have not been constantly subjected to tests that count towards my final grade.  Exams only come at the end of the year and the first year doesn’t count.  You have the freedom to do pretty much whatever you like as long as your tutor is happy with you.</p>
<p>I chose to train with Oxford Modern Pentathlon and spent roughly 18 hours a week training at the sports centre.  There’s student politics, journalism, music, drama, friendly-level sports and competitive university sports.</p>
<p>Studying at Oxford is no more expensive than any other university in the country – in many ways it’s actually cheaper with amazing support from the university and colleges [see Fees and funding].</p>
<p>Without a doubt, studying Computer Science at Oxford has been the best experience of my life.Oxford consistently ranks top 10 in the world for CS.  The course is amazing, the people are really fun and I’m going to make a ton of money.</p>
<p>The academic course</p>
<p>The 3 year Bachelor in CS course is incredibly well designed.  It doesn’t bend to the latest fad or fashion, instead, Oxford students are taught the principles behind whatever technology we’re using.  The idea is that if you need a new language, you can pick it up in an afternoon.  (This was super helpful when I started at Palantir and needed to learn CoffeeScript straight away).</p>
<p>Two-on-one tuition is the highlight of the Oxford experience: you meet with your incredibly knowledgable tutor on a weekly basis.  In a tutorial, you explore the most interesting questions from that week and the tutor hones in on anything you don’t understand. (These expand to 10-person classes for specialist subjects.)</p>
<p>Oxford teaches you computer science from day one and the course encompasses all facets of CS.  It covers functional programming, assembly code, concurrent algorithms, machine learning, linear algebra, compilers, OOP and networks just to name a few [full list here].</p>
<p>Oxford didn’t waste my time on things I could learn myself.  For example, there is no course on javascript or web development, there’s nothing on Objective-C or Swift.  Instead, Oxford teaches you what closures, pointers, garbage collection and heaps are so that when you want to learn a language, you already understand all the concepts.</p>
<p>At the end of the course, you can pretty much work wherever you want.  The Sunday Times found that Oxford computer scientists “were earning an average of £43,895 six months after graduating” [Sunday Times article].  You can get a silicon valley internship in your first summer and my friends have ended up at Palantir, Google, Facebook, Quora etc.</p>
<p>Life outside CS</p>
<p>Oxford colleges are basically Hogwarts houses.  I chose Magdalen, which accepts about 120 students a year (4 of whom study CS).  They provide meals and accommodation and have thriving clubs &amp; societies.  Magdalen is also stunningly beautiful.</p>
<p>Terms are 8 weeks long.  There are three terms in a year.  That means you have a ridiculous amount of vacation each year.</p>
<p>Unlike some American colleges, I have not been constantly subjected to tests that count towards my final grade.  Exams only come at the end of the year and the first year doesn’t count.  You have the freedom to do pretty much whatever you like as long as your tutor is happy with you.</p>
<p>I chose to train with Oxford Modern Pentathlon and spent roughly 18 hours a week training at the sports centre.  There’s student politics, journalism, music, drama, friendly-level sports and competitive university sports.</p>
<p>Studying at Oxford is no more expensive than any other university in the country – in many ways it’s actually cheaper with amazing support from the university and colleges [see Fees and funding].</p>
<p>Studying for my MSc Software Engineering at Oxford University was awesome. I would assume the same would be true of the Computer Science programme, but my experience relates to just the MSc Software Engineering programme.</p>
<p>Oxford University consistently ranks in ‘Top 10’ lists for Computer Science - e.g. No. 3 in the 2013 QS World University Rankings - Computer Science Most Popular in the QS World University Rankings by… — LONDON, May 7, 2013 /PR Newswire UK/ — (No.1 for Europe).</p>
<p>I was taught by some of the leading experts of our field, including learning ‘Service Orientated Architecture’ from the CTO of a leading global web services company (WSO2) who takes a week out from his company to teach the MSc module at Oxford. I learned ‘Agile Methods’ from an expert Agile coach who flies in from New Zealand just to teach at Oxford. I learned how to ‘Design for Security’ from experts, researchers and innovators in the field.  Each course was special in its own way. There is a good mix of experts from industry and academia.</p>
<p>Class sizes are small (typically around 10-12 people), often with 2 or 3 lecturers or guest lecturers for each module. This gives amble opportunity to ask questions and talk through ideas.</p>
<p>The MSc Software Engineering is a part-time programme, intended for professionals who already have some real-world experience in the field. It is common for students to fly over from the US and further afield to attend each module (10 modules + thesis make a MSc).</p>
<p>Oxford tends to draw the best talent - both in terms of lecturers and students - which makes for modules covering cutting-edge methods and technology, and great in-class discussions and perspectives based on real world experience from a range of sectors.</p>
<p>Oxford as a city is great for studying. There are many famous institutions such as the Oxford Union (with high-profile debates), many talks in the evenings on all kinds of topics throughout the academic week, and many atmospheric and historical pubs.</p>
<p>Studying at Oxford means being part of an Oxford College. My college (Kellogg) is a hub of social activity, great food, and great people.</p>
<p>I’ve met some fascinating people on the course, made valuable friends and connections, and have learned a number of new skills and technologies that I’ve already applied to various problems in various industries.  Since finishing my 10 modules, I’ve moved to Canada and set up a technology consulting corporation. I mostly work remotely, but typically fly to visit clients in various parts of the world a few times a year for on-site visits (including the university itself). It’s hard for me to quantify the economic benefits to me of studying at Oxford, but I’m fairly sure that it has helped me gain clients and take on interesting projects, and has increased my earning potential.</p>
<p>If I could turn back time, I would have applied to study my BSc at Oxford too.</p>
</blockquote>
<h4 id="Is-it-a-bad-idea-for-American-high-schoolers-to-apply-to-Oxford-as-undergrads"><a href="#Is-it-a-bad-idea-for-American-high-schoolers-to-apply-to-Oxford-as-undergrads" class="headerlink" title="Is it a bad idea for American high schoolers to apply to Oxford as undergrads?"></a><a href="https://www.quora.com/Is-it-a-bad-idea-for-American-high-schoolers-to-apply-to-Oxford-as-undergrads"><strong>Is it a bad idea for American high schoolers to apply to Oxford as undergrads?</strong></a></h4><blockquote>
<p>I went from an American high school to an undergrad degree at Oxford, so I’ve thought about this a lot.</p>
<p>In summary: maybe. It depends.</p>
<p>There are some serious downsides to going to Oxford as an American:</p>
<p>No financial aid. You can still take out student loans, including US government loans, but you’re ineligible for Pell grants and you won’t receive any scholarship money from the university. Top US universities, by contrast, have very generous financial aid policies.<br>Inflexible course of study. You need to apply for a specific degree program, like a BA in History or an MPhys in physics, etc. In other words, you need to know what you want to major in when you apply, and it’ll be difficult or impossible to change that if you change your mind — depending on what you want to switch to, to switch courses you may need to start over as a first-year and possibly even reapply and reinterview.</p>
<p>Many American high school students haven’t put serious thought into what they want to major in, so they’d be a bad fit for this system.</p>
<p>No broad education. The liberal arts education you’d find in the US — a broad combination of requirements in the humanities and sciences intended to give everyone a well-rounded education — doesn’t exist at Oxford. Rather, you exclusively study your course of study. I did Maths &amp; Computer Science, so every single class I took was in maths or in computer science; there was not only no requirement but even no opportunity to take classes in things like English, economics, philosophy, etc. I think this is a shame.<br>It’s harder to maintain connections as a student… Oxford has pretty long vacations (six weeks around each of Christmas and Easter, and then the long vac in the summer is three months), and if you go home to the States for these it can feel like a bit of a drag on your friendships. Your friends will be making plans, hanging out, etc. over the breaks, which you’ll miss out on, and if you get into a relationship it’ll put strain on that.</p>
<p>My advice here in retrospect: don’t spend too much time at home, especially the Easter vac, which will be tremendously boring (your friends will return to college by two weeks in or so, leaving you with a month by yourself). Instead, try to aggressively make plans to be in the UK or traveling elsewhere.<br>…and even harder after you graduate. After graduating, I moved to Silicon Valley to come work at Quora, but all of my friends remain in the UK, especially in London. I can now expect to see my college friends a couple times a year at most from here on out. This sucks. It also makes life after graduation a bit more isolating; while most of my recently-graduated coworkers came with a ready-made extended network of friends and acquaintances in the Bay Area, I pretty much had to start all over from scratch, which isn’t fun.<br>You need to be more proactive with your career. Going from a US high school -&gt; UK undergrad is pretty rare, so you’ll have to worry about things you might not have otherwise. For example, if you want to go to a US graduate school, they place a higher emphasis on undergraduate research than UK universities do, and you’ll have to both 1) realize this yourself and 2) proactively work to overcome fewer opportunities being available.</p>
<p>For me working in tech, the culture is totally different in the US from in the UK. So I had to 1) realize I should be doing internships during my summers, 2) realize when and how to apply for them, 3) realize what opportunities are available/“good”. Seems easy written like this, but this is the kind of thing people passively assimilate from their peers which you miss out on. In particular, 1) none of my friends were working after their first year, so it didn’t even occur to me to get an internship then, 2) I didn’t apply for things my second year until January/February when already things were filling/filled up, and when I did apply almost nobody interviewed me, 3) it wasn’t until my third year that I had any sense of this at all, vs just applying to random companies I had heard of.</p>
<p>All of this is to say: studying in the UK as an American is rare, and you’ll have to do extra work to make up for it.<br>There are plenty of great things about going to Oxford too, of course. I’m not sure I’d give a blanket recommendation either way. But if you’re considering it, you should keep these things in mind.</p>
</blockquote>
<h4 id="How-many-hours-can-part-time-and-full-time-Oxbridge-students-afford-to-spend-on-playing-video-games"><a href="#How-many-hours-can-part-time-and-full-time-Oxbridge-students-afford-to-spend-on-playing-video-games" class="headerlink" title="How many hours can part-time and full-time Oxbridge students afford to spend on playing video games?"></a><a href="https://www.quora.com/How-many-hours-can-part-time-and-full-time-Oxbridge-students-afford-to-spend-on-playing-video-games"><strong>How many hours can part-time and full-time Oxbridge students afford to spend on playing video games?</strong></a></h4><blockquote>
<p> It depends on your goals. I’m a final-year (although I could actually do another year if I wanted) computer science student and I spend less than 10 hours on university work, most weeks, and I’m (probably) working at a 2.1. (In my second year I worked like this and got 66%, a mid-2.1.)</p>
<p>I’m awake for roughly 16*7 = 112 hours a week, so that leaves about 100 hours. If I so chose, I’m sure I could squeeze in almost as much gaming as I wanted next to my other activities, like eating, socialising, and learning things I actually care about. I, like Peter, think this would be a bit of a waste of the Oxford environment, but it’s perfectly doable.</p>
<p>(Note to American readers: 2.1 here means an “upper second class”, not a GPA.)</p>
</blockquote>
]]></content>
      <categories>
        <category>Oxford</category>
      </categories>
      <tags>
        <tag>Oxford</tag>
      </tags>
  </entry>
  <entry>
    <title>CF635C解题报告</title>
    <url>/2020-04-16-Codeforces-CR635-C.html</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>Given a string $t$ of length $m$ ($m \leq 3000$), a string $s$ of length $n$ ($n \leq 3000$), and an empty string $a$. Perform a sequence of operations which belong to two type: </p>
<ul>
<li>Delete the first character of $s$ and add it at the <strong>front</strong> of $a$.</li>
<li>Delete the first character of $s$ and add it at the <strong>back</strong> of $a$.</li>
</ul>
<p>Perform <strong>no more than</strong> $n$ operations. How many ways to perform such that $a$ ends up having $t$ as a prefix (answer divided by 998244353)?</p>
<a id="more"></a>
<h3 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h3><ul>
<li>Sectional Dynamic Programming</li>
<li>Dimension-Eliminating trick</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h5 id="Trivial-DP-solution"><a href="#Trivial-DP-solution" class="headerlink" title="Trivial DP solution"></a>Trivial DP solution</h5><p>$dp[cur][st][ed]$ Stands for “the number of ways to construct  $t_{st, ed}$ with first $cur$ charasters”.</p>
<p>For each $s_i$:</p>
<p>​        for all $ed == m$: $dp[i][st][ed]$ &lt;- $dp[i - 1][st][ed]$</p>
<p>​        for all $t_{st} == s_i$: $dp[i][st][ed]$ &lt;- $dp[i - 1][st + 1][ed]$</p>
<p>​        for all $t_{ed} == s_i$: $dp[i][st][ed]$ &lt;- $dp[i - 1][st][ed - 1]$</p>
<p>$\therefore$ This solution has $O(n^3)$ time complexity.</p>
<h5 id="Dimention-Elimination"><a href="#Dimention-Elimination" class="headerlink" title="Dimention Elimination"></a>Dimention Elimination</h5><p>Are there any relationship between those three dimentions?</p>
<p>Actually, there’s a strong connection: $cur = ed - st + 1 + wasted$. If we can find a way to fit in the wasted characters into our current solution, then we can elimimate  a dimention.</p>
<p>Then, we find that all wasted characters are put after $t$. In another words, we are matching $t+”<strong>* \”$. </strong>All the wasted charasters can also be counted as $ed = 1$**, and then $cur = ed - st + 1$.</p>
<p>$\therefore$ The solution falls into a normal sectional DP:</p>
<p>$dp[st][ed]$ Stands for “the number of ways to construct  $t_{st, ed}$ with first $(ed - st + 1)$ charasters”.</p>
<p>For each $s_i$:</p>
<p>​        for all $t_{st} == s_i$: $dp[st][st + i - 1]$ &lt;- $dp[st + 1][st + i - 1]$</p>
<p>​        for all $t_{ed} == s_i$: $dp[ed - i + 1][ed]$ &lt;- $dp[ed - i + 1][ed - 1]$, </p>
<p>which has $O(n^2)$ time complexity.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll dp[<span class="number">3030</span>][<span class="number">3030</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">	n = s.size(), m = t.size();</span><br><span class="line">	s = <span class="string">&quot; &quot;</span> + s;</span><br><span class="line">	t = <span class="string">&quot; &quot;</span> + t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		t += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">1</span>] == t[i] || t[i] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">			dp[i][i] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> gap = <span class="number">1</span>; gap &lt; n; gap ++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = i + gap; j &lt;= n; i ++, j ++) &#123;</span><br><span class="line">			<span class="keyword">char</span> c = s[gap + <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span> (c == t[i] || t[i] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">				(dp[i][j] += dp[i + <span class="number">1</span>][j]) %= mod;</span><br><span class="line">			<span class="keyword">if</span> (c == t[j] || t[j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">				(dp[i][j] += dp[i][j - <span class="number">1</span>]) %= mod;</span><br><span class="line">		&#125;</span><br><span class="line">	ll fans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &lt;= n; j ++)</span><br><span class="line">		(fans += dp[<span class="number">1</span>][j]) %= mod;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; fans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3><p>这道题你考场上花了两个小时…还是没想到DP的优化方法。或者说，其实你都没有看清楚，这其实是一个DP优化问题。<strong>这要让你警醒啊，看问题要看本质，想解法才能利用你之前的经验 (之前解决本质类似的题目的经验)。</strong></p>
<p>你考场上一直在想“枚举前后分界点”的方法，殊不知，这是一个没有意义的维度：在哪里分界没关系，只要构成了t的同样的字串，对答案的挺想影响就都是一样的。<strong>所以设计dp状态的时候，要找对答案有意义的维度。</strong></p>
<p>你其实早就意识到“前缀是t”而不是“字串是t”是这道题目的关键。但是你就是没有想到，这个性质可以用来把wasted的字符加入区间的考虑当中，以消去一个维度。</p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>DP</category>
        <category>Sectional DP</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
        <tag>DP</tag>
        <tag>Dimension-Eliminatating Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>CR635B解题报告</title>
    <url>/2020-04-16-Codeforces-CR635-B.html</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>Given $n_r$ red stones, $n_g$ green stones, and $n_b$ blue stones, each of which has a weight ($1 \leq w \leq 10^9$). Find a red stone, a green stone, and a blue stone, such that $(w_r - w_g)^2 + (w_g - w_b)^2 + (w_b - w_r)^2$ is minimized.</p>
<a id="more"></a>
<h3 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h3><ul>
<li>(generally speaking) Functional Optimization task</li>
<li>Brutal Force Improvement (wrong)</li>
<li><strong>Greedy</strong></li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Feature 1 : If $w_r$ and $w_g$ are fixed, we can find optimal $w_b$ in $O(log_n)$ time. (Not useful in the standard solution)</p>
<p>Feature 2: Since the order of r, g, b has only six circumstances, we can enumerate them.</p>
<p><strong>Feature 3</strong>: Suppose $w_r \leq w_g \leq w_b$, with fixed w_r, <strong>the smallest $w_b$ must be the optimal one</strong>, because $w_b$ always contribute to the answer positively.</p>
<p>$\therefore$ We enumerate the order, enumerate the <strong>small</strong> weight, find the least <strong>middle</strong>  weight, and find the least <strong>large</strong> weight.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> r, g, b;</span><br><span class="line">ll rl[<span class="number">1000010</span>];</span><br><span class="line">ll gl[<span class="number">1000010</span>];</span><br><span class="line">ll bl[<span class="number">1000010</span>];</span><br><span class="line">ll fans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sqr</span> <span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x * x;&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span> <span class="params">(ll a, ll b, ll c)</span> </span>&#123;<span class="keyword">return</span> sqr(a - b) + sqr(b - c) + sqr(c - a);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> g, <span class="keyword">int</span> b, ll *rl, ll *gl, ll *bl)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ptg = <span class="number">1</span>, ptb = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i ++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (ptb &lt; b &amp;&amp; bl[ptb] &lt; rl[i])</span><br><span class="line">			ptb ++;</span><br><span class="line">		ll mid = (rl[i] + bl[ptb]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (ptg &lt; g &amp;&amp; <span class="built_in">abs</span> (gl[ptg] - mid) &gt;= <span class="built_in">abs</span> (gl[ptg + <span class="number">1</span>] - mid))</span><br><span class="line">			ptg ++;</span><br><span class="line">		fans = min (fans, calc (rl[i], gl[ptg], bl[ptb]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">		fans = <span class="number">1ll</span>&lt;&lt;<span class="number">62</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; r &gt;&gt; g &gt;&gt; b;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i ++)	<span class="built_in">cin</span> &gt;&gt; rl[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= g; i ++)	<span class="built_in">cin</span> &gt;&gt; gl[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; i ++)	<span class="built_in">cin</span> &gt;&gt; bl[i];</span><br><span class="line">		sort (rl + <span class="number">1</span>, rl + r + <span class="number">1</span>);</span><br><span class="line">		sort (gl + <span class="number">1</span>, gl + g + <span class="number">1</span>);</span><br><span class="line">		sort (bl + <span class="number">1</span>, bl + b + <span class="number">1</span>);</span><br><span class="line">		solve (r, g, b, rl, gl, bl);</span><br><span class="line">		solve (r, b, g, rl, bl, gl);</span><br><span class="line">		solve (g, r, b, gl, rl, bl);</span><br><span class="line">		solve (g, b, r, gl, bl, rl);</span><br><span class="line">		solve (b, g, r, bl, gl, rl);</span><br><span class="line">		solve (b, r, g, bl, rl, gl);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; fans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3><p>这道题给你最大的收获，就是<strong>常数个变量的大小关系可以$O(C!)$枚举</strong>，尤其是在大小关系确定以后可以简化解法(specifically，出现了新的<strong>单调</strong>性质)的时候。</p>
<p>这样存在着显然的枚举方法的最优化题目，一般都是要找到一些在枚举中存在的<strong>贪心性质</strong>(m越接近s和l的中点答案越优，l越小答案越优)和<strong>单调性质</strong>，然后简化枚举。在更难的题目中，有些贪心和单调性只在特定的枚举顺序中才存在。</p>
<p>这道题你考场上FST了…单调性不能乱猜，你在探索算法，而不是在浑水摸鱼。</p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>Optimization</category>
        <category>Greedy</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
        <tag>Greedy</tag>
        <tag>Optimization</tag>
        <tag>Monotonicity</tag>
      </tags>
  </entry>
  <entry>
    <title>CR635A解题报告</title>
    <url>/2020-04-16-Codeforces-CR635-A.html</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一颗n个节点，以1为根的树。选择k个特殊点，使得$sum_{i=1}^{k}$(第i个特殊点到根的路径上的普通点个数)最小。<br><a id="more"></a></p>
<h3 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h3><ul>
<li><p>树上选点集的问题</p>
</li>
<li><p>对答案的贡献与路径有关</p>
</li>
<li>每个点的状态对其子树内的点的贡献有影响</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>发现<strong>贪心</strong>性质：<strong>任何一点的子孙的贡献一定不劣于其本身的贡献。</strong></p>
<p>$\therefore$ 得到最优方案的性质：点i在方案中时，其子树内所有节点一定也都在方案中。</p>
<p>上述性质可以用来计算点与点之间的所有影响。</p>
<p> $\therefore$ 得到每个点的贡献为：$distance - number$</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> point[<span class="number">200020</span>], te = <span class="number">1</span>, par[<span class="number">200020</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span> &#123;</span><span class="keyword">int</span> to, next;&#125; edge[<span class="number">2000020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	te ++;</span><br><span class="line">	edge[te].to = v;</span><br><span class="line">	edge[te].next = point[u];</span><br><span class="line">	point[u] = te;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll sum[<span class="number">200020</span>], num[<span class="number">200020</span>], pans[<span class="number">200020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// cerr &lt;&lt; &quot;dfs &quot; &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">	num[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> e = point[x]; e; e = edge[e].next) &#123;</span><br><span class="line">		<span class="keyword">int</span> to = edge[e].to;</span><br><span class="line">		<span class="keyword">if</span> (to == par[x])</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		par[to] = x;</span><br><span class="line">		sum[to] = sum[x] + <span class="number">1</span>;</span><br><span class="line">		dfs (to);</span><br><span class="line">		num[x] += num[to];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a, b, i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		add (a, b);</span><br><span class="line">		add (b, a);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sum[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	dfs (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		pans[i] = sum[i] - num[i];</span><br><span class="line">	sort (pans + <span class="number">1</span>, pans + n + <span class="number">1</span>);</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; n - k; i --)</span><br><span class="line">		ans += pans[i];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题收获"><a href="#解题收获" class="headerlink" title="解题收获"></a>解题收获</h3><p>树上选点最优化的问题，肯定不是randomly选，而是肯定存在着一些性质，使得选点有规律可循。规律有可能是<strong>对一个点和其子树的某些限制</strong>，就像是这道题一样。找到性质以后，问题就可以用<strong>贪心</strong>或者<strong>树形动态规划</strong>解决。</p>
<p>从另一个角度看，每个点都对答案有贡献，难点在于如何处理<strong>点之间的影响</strong>。在本题中，可以通过贪心性质来计算出点之间的影响。</p>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>Tree</category>
        <category>Greedy</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Algorithms</tag>
        <tag>Problem Reports</tag>
        <tag>Greedy</tag>
        <tag>Tree</tag>
        <tag>Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>博客操作指南：域名，hexo，本地存储结构</title>
    <url>/2020-02-09-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html</url>
    <content><![CDATA[<p>启用博客啦！记录一些操作的步骤，以免以后忘记。</p>
<a id="more"></a>
<h3 id="1-域名相关"><a href="#1-域名相关" class="headerlink" title="1.域名相关"></a>1.域名相关</h3><p>域名从阿里云平台购买。需登录阿里云平台进行续费和解析等操作。</p>
<h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>我在阿里云上注册了域名：simulated-anneal.info，我想将其解析到我在github上的主页：jackbai0914.github.io。</p>
<p>将域名解析到<a href="http://jackbai.github.io上，需要添加两条解析：">http://jackbai.github.io上，需要添加两条解析：</a></p>
<ul>
<li>先添加一个CNAME记录类型，主机记录写@，后面记录值写上<a href="http://jackbai0914.github.io">http://jackbai0914.github.io</a></li>
<li>再添加一个CNAME记录类型，主机记录写www，后面记录值也是<a href="http://jackbai0914.github.io">http://jackbai0914.github.io</a></li>
</ul>
<p>这样别人用www和不用www都能访问网站（其实www的方式，会先解析成<a href="http://jackbai0914.github.io，然后根据CNAME再变成[simulated-anneal.info](simulated-anneal.info)，即中间经过一次转换）。">http://jackbai0914.github.io，然后根据CNAME再变成[simulated-anneal.info](simulated-anneal.info)，即中间经过一次转换）。</a></p>
<blockquote>
<p>A记录是直接解析到空间IP地址；<br>CNAME是解析到别名；<br>MX是电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器，是设置企业邮箱的;<br>NS是指DNS,用默认的就行,一般不用修改；<br>TXT一般指为某个主机名或域名设置的说明，是企业邮箱的辅助设置。</p>
</blockquote>
<p>然后还需在github的库中进行一步操作：</p>
<ul>
<li>在master分支下创建名为“CNAME”的文件。</li>
<li>将内容编辑为“simulated-anneal.info”，即想要绑定的域名。</li>
<li>在settings中，将Custom domain改为simulated-anneal.info。</li>
</ul>
<p>这一步将github的主页重定向到了simulated-anneal.info上。但是博主目前还不理解这一步的目的….</p>
<h3 id="2-hexo常用命令"><a href="#2-hexo常用命令" class="headerlink" title="2.hexo常用命令"></a>2.hexo常用命令</h3><p>在终端中用hexo命令，可以进行本地编辑博客，生成静态网页，部署博客到github上等操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post &lt;title&gt; <span class="comment">#新建名为&lt;title&gt;的文章，存储在source/_posts中</span></span><br><span class="line">hexo new page &lt;title&gt; <span class="comment">#新建名为&lt;title&gt;的网页，存储在source中</span></span><br><span class="line">hexo new draft &lt;title&gt; <span class="comment">#新建草稿，存储在source/_drafts中</span></span><br><span class="line">hexo publish [layout] &lt;title&gt; <span class="comment">#将文件移到source/_posts中</span></span><br><span class="line"></span><br><span class="line">hexo generate <span class="comment">#生成静态网页</span></span><br><span class="line">hexo generate --watch <span class="comment">#监视文件变动</span></span><br><span class="line">hexo deploy <span class="comment">#部署网页至github上</span></span><br><span class="line">hexo server <span class="comment">#启动网页预览</span></span><br><span class="line">hexo server -p 2333 <span class="comment">#将预览端口改为2333</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，网页正常情况下可以忽略此条命令。执行该指令后。会删掉站点根目录下的public文件夹。明白了吧，public即存储生成的静态网页。</span></span><br><span class="line"></span><br><span class="line">hexo deploy --generate <span class="comment">#在生成完毕后自动部署网站</span></span><br></pre></td></tr></table></figure>
<h3 id="3-本地存储结构"><a href="#3-本地存储结构" class="headerlink" title="3.本地存储结构"></a>3.本地存储结构</h3><ul>
<li><p>sources：修改文章和博客结构的地方。</p>
</li>
<li><p>themes：存储博客外观主题的地方。</p>
<ul>
<li>NexT/_config.yml：外观主题的settings。</li>
</ul>
</li>
<li>scaffolds：文章模版库。</li>
<li>public：存储生成的静态网页的地方，一般不要修改。</li>
<li>_config.yml：博客settings。</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>宾夕法尼亚大学 访校印象</title>
    <url>/2019-08-27-UPenn.html</url>
    <content><![CDATA[<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>学校名称：University of Pennsylvania</p>
<a id="more"></a>
<p>位置: Philadelphia, PA 19104</p>
<p>排名：综合性大学排名第8（2018 US News）</p>
<p>在校生人数：21, 826</p>
<p>录取率：9.3% （2017）</p>
<p>国际生比例：6.6%</p>
<p>学费（不含食宿）：45, 556</p>
<p>课堂大小：83%的课堂少于30人</p>
<p>SAT：阅读 680-750；数学 690-770（2017）</p>
<p>ACT：32-35（2017）</p>
<p>托福：100 （最低要求80）</p>
<h3 id="校园环境"><a href="#校园环境" class="headerlink" title="校园环境"></a>校园环境</h3><p>宾大的校园不大不小，主要建筑之间的距离不远。建筑的主要色调是红色，风格比较古老。我们沿着Locust Walk一路走，环境很好，各个建筑就散布在周围。</p>
<p>我们先到了学校的图书馆Van pelt。里面学生不多，但是看起来都在安静，认真地学习。学生用的电脑设备很好，我看到了一个学生在用带弧形的双屏读论文写报告。从图书馆出来，我们能看见著名的纽扣和富兰克林的雕塑。</p>
<p>走到Locust Walk的尽头就来到了Warton商学院的位置。这栋建筑从外面看不显眼，但这是宾大的核心，是排名第一的商学院。我们正好赶上了2020届新生的入学仪式，发现Warton的各个Cohert竟然都是以货币单位命名的…</p>
<h3 id="学术能力：寻问招生官"><a href="#学术能力：寻问招生官" class="headerlink" title="学术能力：寻问招生官"></a>学术能力：寻问招生官</h3><p>从宾大以后的学校，我都有机会参加AO的information session或者现场找AO问问题。我第一次主动找招生官，表现的还是比较局促。之后要多问一些问题，对每个问题都有一些跟进，尤其是在自己喜欢的学校。</p>
<p>我首先询问了关于计算机专业的问题：是否有CS相关的非CS专业？AO告诉我是没有的。然后他给我仔细介绍了学生如何选择多个自己喜欢的专业：1/3的宾大学生都会选择major + minor的形式。而对于计算机，大部分人都会放在minor的位置，作为自己研究其他专业的一个工具。major的课程需要完成core的30门课程，而minor的课程只有十几门必修课。</p>
<p>进一步地，CS的专业在文理学院和工程院都有开设。一般人minor的都会是文理学院的那一个，它可能深度较浅但是较广。如果major工程院的CS专业，AO说，那很少有人会再minor其他的专业，因为工程院对CS对major的要求会比较高。</p>
<h3 id="申请相关"><a href="#申请相关" class="headerlink" title="申请相关"></a>申请相关</h3><p>我也询问了招生官关于申请的问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Q: 申请中什么最重要？</span><br><span class="line"></span><br><span class="line">A: AO传递的最主要的信息是，out-of-classroom与学术能力一样重要；Show us who you are是申请最主要的目标。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Q: 活动列表应该怎样安排？</span><br><span class="line"></span><br><span class="line">A: 写对我影响最大，最重要的活动。当然，我也应该考虑到，这些活动group together以后会给招生官展现怎样的自己。最后，多余的活动也可以作为补充信息，做成resume交上去。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="额外信息"><a href="#额外信息" class="headerlink" title="额外信息"></a>额外信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Q：能评价下费城是个怎样的城市吗？</span><br><span class="line">Lynn：文化氛围比较浓厚，城市中心有很地标性的建筑。虽然建筑风格比较老，玩乐也不像纽约那么丰富，但是该有的娱乐设施都有，能找到好吃的餐馆和KTV。整个城市的设计感觉会和国内比较像：比较紧凑不需要车，不过活动半径并不是特别大。</span><br><span class="line"></span><br><span class="line">Q：那学校的人文环境怎么样？</span><br><span class="line">Ni Ruoyang：因为是一个职业型（Pre-professional）大学，大家都想去沃顿，所以几乎没有人文环境。很多社团的运作都很商业化。</span><br><span class="line">刘奕麟：在宾大很容易会把自己禁锢在商业生活中。其实校园还是很多元的，想找肯定能找到人文氛围，也有学生互相辩论聊天地、聊政治的社团。</span><br><span class="line"></span><br><span class="line">Q：学校的强势学科有哪些？</span><br><span class="line">刘奕麟：沃顿有很多业界中最好的教授，所有人都争取在大四毕业前抢到最好的教授，管理的老师。文理院里面，宾大的经济和政治学挺强的。</span><br><span class="line"></span><br><span class="line">Q：学校除了商科以外，还有什么别的强势科目吗？只有商科好是一个误区吗？</span><br><span class="line">Lynn：宾大肯定是以商业为主。不可否认的是，我们学校的文理学院还是比较强的，文学和艺术史也比较强。在学校进来之后能申请双学位（Dual Degree），很多非商科的人也会选择商科作为第二学位。大一入学前就要申请的双学位项目有M&amp;T，Huntsman。这种双学位项目出来发展也很好的。</span><br><span class="line"></span><br><span class="line">Q：学校的必修课和选修课有哪些？</span><br><span class="line">刘奕麟：学校的体育课程不算分。要求的话和别的大学类似，分通识课和专业课。毕业要完成通识课，7个不同科目型的要求（Sectors），还有专业课及自由选修课。</span><br><span class="line"></span><br><span class="line">Q：平时课业压力大吗？</span><br><span class="line">Ni Ruoyang：在沃顿，课业并不会过于繁重，会根据大家的表现给分（Grade on a Curve）。沃顿的压力可能不在他们的课业难度上，课堂上会有很多以小组为单位进行的案例研究。这样的实战案例通常会占用很大的时间。</span><br><span class="line">刘奕麟：文理院的课业压力还是蛮大的。学校的数学教学比较差。因为注重研究，所以教学质量不一定好，很多老师不会怎么教学生。不过总体来说，你的时间付出和你收获的知识是成正比的。</span><br><span class="line"></span><br><span class="line">作者：Panopath过来人</span><br><span class="line">链接：https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;24297668&#x2F;answer&#x2F;350786305</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>College Application</category>
      </categories>
  </entry>
  <entry>
    <title>哥伦比亚大学 访校印象</title>
    <url>/2019-08-25-Columbia-University.html</url>
    <content><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉上，哥大是一个精致，古典与现代结合的学校。地理位置优越，生活便利；工科教授的水平一流，学生水平，工程资源一般；需要主动利用资源。</p>
<p>总体感觉挺好的。也有朋友和父母熟人在旁边。只是在最繁华的市中心度过4年，不知道是否能保持学术的初心？</p>
<a id="more"></a>
<h3 id="校园环境"><a href="#校园环境" class="headerlink" title="校园环境"></a>校园环境</h3><p>学校坐落在纽约市中心，曼哈顿岛的中部，大约在110-120街区。中心是一个图书馆和一个大草坪，还有一个圆顶式建筑。吉祥物是狮子，不过实在有点瘦…</p>
<p>学校占地面积小。不过教学楼不仅在“校区”里，而是和城市融合。工学院的楼(Science Building)比较新。</p>
<p>据学长说，吃饭的地方很多，中餐很好。生活很方便，“开学背个电脑去就完事儿了”。</p>
<p>工学院的楼下有独立的咖啡厅。走过的时候，看见两个学生安静的一起坐在那里指尖飞舞。一杯咖啡，一个并肩探索的同学，在这里待一整天，也挺让人安心的。</p>
<h3 id="学术能力"><a href="#学术能力" class="headerlink" title="学术能力"></a>学术能力</h3><p>按学长的话说，CS专业的学生普遍不是很厉害(厉害的都去MIT&amp;Stanford&amp;Princeton了)，但是教授很厉害(包括几个图灵奖+算法导论的作者)。可以跳课，可以修研究生课程；可以上上数学系的课，因为哥大纯数也挺好。</p>
<p>学长指出哥大的CS偏向理论。这其实挺好(比宾大好多了)，毕竟精通理论是之后做事情的必要条件。</p>
<p>哥大的人文Core对于工程院的学生选修，但是大部分同学还是会选一些。包括一些很好的通识课程，能让我浅层次地了解一些历史，哲学的知识。</p>
]]></content>
      <categories>
        <category>College Application</category>
      </categories>
  </entry>
  <entry>
    <title>一道划痕</title>
    <url>/2019-08-08-%E5%8F%8D%E6%80%9D.html</url>
    <content><![CDATA[<p>现在的状态，不能支撑你到达彼岸。</p>
<a id="more"></a>
<p>你变成了一个爱偷懒的人。之前跑的太累了是你的借口，于是现在就“暂时性”的放松。你不知道申请是你的最后一搏吗？没有了锐气，斗志和状态，你什么都不是。你是很努力的奔跑过。可是这不代表你现在就有休息的权利。冲刺的时候休息。你会发现那些弱智的同学也能超过你。这不可怕吗？</p>
<p>你像以前一样无视规矩。可是，你难道分不清哪些是为自己好吗？你欠下DDL真的不羞愧吗？一次次的保证，真的不觉得以后会后悔？你连计划，都不会定了。你这样下去，完蛋了。</p>
<p>还能记起来斯坦福的梦吗？</p>
<p>热闹的小宿舍，简朴的小房间；像海绵一样的作业，不Carry不爽课堂；做宿舍里第一个起床的人，静听着开水的滚沸和隔壁传来的琴声；清晨6点钟的阳光，Dry Lake旁的落日；性情随和，却对数学嗅觉敏锐的华裔同学，还有，笑容带着酒窝的那个女生……</p>
<p>这些回忆，我已许久未曾想起。它们闪光的表面也蒙上了灰尘。这也很正常吧？斯坦福啊，对它感兴趣的同学还不够多吗？我是自作多情了，参加了个夏校，就以为发生了什么不得了的事，造就了我们的缘分。可事实是，痴迷斯坦福的人成千上万；99%的人做后都是抱着痛心离开，片面的讲成为失败者。我呢，大不了就是他们之一。</p>
<p>可是，我为什么又觉得自己不平常呢？每个人都能看到加州六点的晨雾吗？每个人都能在那些红色的房子里，做着assignments兴奋得发抖吗？每个人都会在营里认识几个忘不了的朋友吗？</p>
<p>真是可笑。剥去执念，我竟真的找不到自己追求的方向了。以后会后悔的。我可不想知道这是一种什么样的感觉，失败者。</p>
<p>从糊涂的梦里醒过来吧。你还有机会，走向光明。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>[Codeforces]CR576 比赛记录</title>
    <url>/2019-08-03-Codeforces-CR576.html</url>
    <content><![CDATA[<h2 id="Codeforces-Round-576-Div-1"><a href="#Codeforces-Round-576-Div-1" class="headerlink" title="Codeforces Round #576 (Div. 1)"></a>Codeforces Round #576 (<a href="http://codeforces.com/contest/1198/standings">Div. 1</a>)</h2><h3 id="1-General-Info"><a href="#1-General-Info" class="headerlink" title="1. General Info"></a>1. General Info</h3><ul>
<li>Problem: ABCD solved, EF unread.</li>
<li>Ranking: 167 out of 662.</li>
<li>Rating: 2179 -&gt; 2221 (+42).</li>
<li>Summary: <ul>
<li>Mistakenly understood A at first, and wasted two submissions.</li>
<li>Solved C, a constructive task based on Independent Set and Node Matching.</li>
<li>Wasted too much time on D, a brute force with a trivial feature.</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="2-Problems"><a href="#2-Problems" class="headerlink" title="2. Problems"></a>2. Problems</h3><h4 id="A-MP3"><a href="#A-MP3" class="headerlink" title="A. MP3"></a>A. MP3</h4><p>Statement: Given n intergers, calculate the maximum numbers of integers we can get by choosing m consecutive values inputed.</p>
<p>Tutorial: In the contest, I used Two Pointers to go through the sorted sequence. Yet, we can transformed the array into value-indexed form and calculated the prefix.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, I, a[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> L;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> pans = <span class="number">0</span>, fans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; I;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">	(I *= <span class="number">8</span>) /= n;</span><br><span class="line">	<span class="keyword">if</span> (I &gt; <span class="number">30</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L = (<span class="number">1</span> &lt;&lt; I);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">	sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = i;</span><br><span class="line">		<span class="keyword">while</span> (j + <span class="number">1</span> &lt;= n &amp;&amp; a[j + <span class="number">1</span>] == a[i])</span><br><span class="line">			j ++;</span><br><span class="line">		<span class="keyword">int</span> num = j - i + <span class="number">1</span>;</span><br><span class="line">		v.push_back(num);</span><br><span class="line"></span><br><span class="line">		pans += num;</span><br><span class="line">		<span class="keyword">if</span> (v.size() &gt; L)</span><br><span class="line">			pans -= v[v.size() - <span class="number">1</span> - L];</span><br><span class="line">		<span class="comment">// cerr &lt;&lt; num &lt;&lt; &quot; &quot; &lt;&lt; pans &lt;&lt; endl;</span></span><br><span class="line">		fans = max (fans, pans);</span><br><span class="line">		i = j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; n - fans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="B-Welfare-State"><a href="#B-Welfare-State" class="headerlink" title="B. Welfare State"></a>B. Welfare State</h4><p>Statement: Given a array of n integers, support two operations: 1) modify one value. 2) input v, apply <script type="math/tex">a_i = max (a_i, v)</script> to every i. Output the value of every integers in the end.</p>
<p>Tutorial: In the contest, I coded a SegTree with lazy mark within 10 minutes, achieving $O(nlogn)$ time. However, noticing that only one Option 2 will be useful and Option 1&amp;2 wouldn’t influence each other, we can calculate options independentely and combine them in the end.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> ins[<span class="number">200020</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> st, ed;</span><br><span class="line">	node *l, *r;</span><br><span class="line">	<span class="keyword">int</span> lz, v;</span><br><span class="line">	node (<span class="keyword">int</span> stt, <span class="keyword">int</span> edd, <span class="keyword">int</span> lzz, <span class="keyword">int</span> vv, node *L, node *R) &#123;</span><br><span class="line">		st = stt, ed = edd, lz = <span class="number">-1</span>, v = vv, l = L, r = R;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; *pnode;</span><br><span class="line"><span class="function">pnode <span class="title">build</span> <span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (st == ed) &#123;</span><br><span class="line">		pnode ne = <span class="keyword">new</span> node (st, ed, <span class="number">0</span>, ins[st], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> ne;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = (st + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	pnode ne = <span class="keyword">new</span> node (st, ed, <span class="number">0</span>, <span class="number">0</span>, build (st, mid), build (mid + <span class="number">1</span>, ed));</span><br><span class="line">	<span class="keyword">return</span> ne;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span> <span class="params">(pnode r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!r || !r-&gt;l)</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span> (r-&gt;lz != <span class="number">-1</span>) &#123;</span><br><span class="line">		r-&gt;l-&gt;lz = max (r-&gt;l-&gt;lz, r-&gt;lz);</span><br><span class="line">		r-&gt;r-&gt;lz = max (r-&gt;r-&gt;lz, r-&gt;lz);</span><br><span class="line">		r-&gt;l-&gt;v = max (r-&gt;l-&gt;v, r-&gt;lz);</span><br><span class="line">		r-&gt;r-&gt;v = max (r-&gt;r-&gt;v, r-&gt;lz);</span><br><span class="line">		r-&gt;lz = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cover</span> <span class="params">(pnode r, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (st &lt;= r-&gt;st &amp;&amp; r-&gt;ed &lt;= ed) &#123;</span><br><span class="line">		r-&gt;lz = max (r-&gt;lz, v);</span><br><span class="line">		r-&gt;v = max (r-&gt;v, v);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	down (r);</span><br><span class="line">	<span class="keyword">if</span> (st &lt;= r-&gt;l-&gt;ed)	cover (r-&gt;l, st, ed, v);</span><br><span class="line">	<span class="keyword">if</span> (r-&gt;r-&gt;st &lt;= ed)	cover (r-&gt;r, st, ed, v);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span> <span class="params">(pnode r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (r-&gt;st == r-&gt;ed) &#123;</span><br><span class="line">		r-&gt;v = v;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	down (r);</span><br><span class="line">	<span class="keyword">if</span> (p &lt;= r-&gt;l-&gt;ed)	modify(r-&gt;l, p, v);</span><br><span class="line">	<span class="keyword">if</span> (r-&gt;r-&gt;st &lt;= p)	modify(r-&gt;r, p, v);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span> <span class="params">(pnode r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (r-&gt;st == r-&gt;ed) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; r-&gt;v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	down (r);</span><br><span class="line">	order(r-&gt;l);</span><br><span class="line">	order(r-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ins[i];</span><br><span class="line">	pnode root = build (<span class="number">1</span>, n);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i ++) &#123;</span><br><span class="line">		<span class="keyword">int</span> tp, a, b;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; tp;</span><br><span class="line">		<span class="keyword">if</span> (tp == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			modify(root, a, b);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tp == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">			cover (root, <span class="number">1</span>, n, a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	order(root);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="C-Matching-vs-Independent-Set"><a href="#C-Matching-vs-Independent-Set" class="headerlink" title="C. Matching vs Independent Set"></a>C. Matching vs Independent Set</h4><p>Statement: Given a graph with 3*n vertices and m edges, find either a matching of n edges, or an independent set of n vertices.</p>
<p>Tutorial: </p>
<ul>
<li>Calculating the Maximum Independent Set and the Maximum Matching of a graph both have high time complexity, so we need to think about the unique feature of this task.</li>
<li>3*n vertices are the strongest hint. We add edges to a matching greedily till no new edge can be added. Then, it’s easy to see we must achieved one of the conditions.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span> &#123;</span><span class="keyword">int</span> to, next;&#125; edge[<span class="number">5000050</span>];</span><br><span class="line"><span class="keyword">int</span> point[<span class="number">3000030</span>], te = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	te ++;</span><br><span class="line">	edge[te].to = v;</span><br><span class="line">	edge[te].next = point[u];</span><br><span class="line">	point[u] = te;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">3000030</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; rec;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T --) &#123;</span><br><span class="line">		te = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; i ++)</span><br><span class="line">			point[i] = flag[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> a, b, i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			add (a, b);add (b, a);</span><br><span class="line">		&#125;</span><br><span class="line">		rec.resize(<span class="number">0</span>);</span><br><span class="line">		cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; i ++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (flag[i])</span><br><span class="line">				<span class="keyword">continue</span> ;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> e = point[i]; e; e = edge[e].next) &#123;</span><br><span class="line">				<span class="keyword">int</span> to = edge[e].to;</span><br><span class="line">				<span class="keyword">if</span> (!flag[to]) &#123;</span><br><span class="line">					flag[to] = flag[i] = <span class="number">1</span>;</span><br><span class="line">					rec.push_back(e / <span class="number">2</span>);</span><br><span class="line">					cnt ++;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (cnt &gt;= n) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Matching&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; rec[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;IndSet&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n &amp;&amp; ans &lt; n; i ++)</span><br><span class="line">				<span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">					ans ++;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="D-Rectangle-Painting-1"><a href="#D-Rectangle-Painting-1" class="headerlink" title="D. Rectangle Painting 1"></a>D. Rectangle Painting 1</h4><p>Statement: A square grid of size n<em>n ($n \leq 50$) has some cells colored in black. Colored a rectangle of size h </em> w into white requires $max(h, w)$ costs. Calculate the miminum cost to whiten the whole grid.</p>
<p>Tutorial: The necessary condition of costing less than n is to leave one column uncovered. This feature suggests us to use DP on rectangles, with $O(n^4)$ states and $O(n)$ time to calculate one state, enumerating the missing column.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">55</span>][<span class="number">55</span>], s[<span class="number">2</span>][<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> rec[<span class="number">55</span>][<span class="number">55</span>][<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> stx, <span class="keyword">int</span> sty, <span class="keyword">int</span> edx, <span class="keyword">int</span> edy)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (edx &lt; stx || edy &lt; sty)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (~rec[stx][sty][edx][edy])</span><br><span class="line">		<span class="keyword">return</span> rec[stx][sty][edx][edy];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (sum[edx][edy] - sum[stx - <span class="number">1</span>][edy] - sum[edx][sty - <span class="number">1</span>] + sum[stx - <span class="number">1</span>][sty - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">		rec[stx][sty][edx][edy] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	rec[stx][sty][edx][edy] = max (edx - stx + <span class="number">1</span>, edy - sty + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = stx; x &lt;= edx; x ++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>][x][edy] - s[<span class="number">0</span>][x][sty - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		rec[stx][sty][edx][edy] = min (rec[stx][sty][edx][edy], </span><br><span class="line">			dfs (stx, sty, x - <span class="number">1</span>, edy) + dfs (x + <span class="number">1</span>, sty, edx, edy));</span><br><span class="line">		<span class="keyword">if</span> (dfs (stx, sty, x - <span class="number">1</span>, edy) &gt;= rec[stx][sty][edx][edy])</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y = sty; y &lt;= edy; y ++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">1</span>][edx][y] - s[<span class="number">1</span>][stx - <span class="number">1</span>][y] != <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span> ;</span><br><span class="line">		rec[stx][sty][edx][edy] = min (rec[stx][sty][edx][edy], </span><br><span class="line">			dfs (stx, sty, edx, y - <span class="number">1</span>) + dfs (stx, y + <span class="number">1</span>, edx, edy));</span><br><span class="line">		<span class="keyword">if</span> (dfs (stx, sty, edx, y - <span class="number">1</span>) &gt;= rec[stx][sty][edx][edy])</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> rec[stx][sty][edx][edy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">			<span class="keyword">char</span> c;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">			mp[i][j] = (c == <span class="string">&#x27;#&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">			sum[i][j] = mp[i][j] + sum[i][j - <span class="number">1</span>] + sum[i - <span class="number">1</span>][j] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">			s[<span class="number">0</span>][i][j] = s[<span class="number">0</span>][i][j - <span class="number">1</span>] + mp[i][j];</span><br><span class="line">			s[<span class="number">1</span>][i][j] = s[<span class="number">1</span>][i - <span class="number">1</span>][j] + mp[i][j];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(rec, <span class="number">-1</span>, <span class="keyword">sizeof</span> rec);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; dfs (<span class="number">1</span>, <span class="number">1</span>, n, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// cerr &lt;&lt; TIME &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="E-Rectangle-Painting-2"><a href="#E-Rectangle-Painting-2" class="headerlink" title="E. Rectangle Painting 2"></a>E. Rectangle Painting 2</h4><p>Statement: A square grid of size n<em>n ($n \leq 10^9$) has some cells colored in black， which are the union of m ($m \leq 50$) rectangles. Colored a rectangle of size h </em> w into white requires $min(h, w)$ costs. Calculate the miminum cost to whiten the whole grid.</p>
<p>Tutorial: </p>
<ul>
<li>Couldn’t find an easier Flow problem…</li>
<li>The unwritten feature of this problem is that we are actually choosing columns and rows. As we construct a bipartite graph, we want to find the minimal vertex cover, which equals to the Maximum Flow. </li>
<li>The only thing left is to compress identical vertices, to discretize the grid.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//st: 11:55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ins[<span class="number">55</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; c, r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Flow &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">2e9</span> + <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> first[<span class="number">1010</span>], point[<span class="number">1010</span>], te = <span class="number">1</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">e</span> &#123;</span><span class="keyword">int</span> to, next, flow;&#125; edge[<span class="number">1000010</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		te ++;</span><br><span class="line">		edge[te].to = b;</span><br><span class="line">		edge[te].next = point[a];</span><br><span class="line">		edge[te].flow = c;</span><br><span class="line">		point[a] = te;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> dis[<span class="number">1010</span>];</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i ++)</span><br><span class="line">			dis[i] = oo;</span><br><span class="line">		dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		q.push(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = q.front();</span><br><span class="line">			q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> e = point[x]; e; e = edge[e].next) &#123;</span><br><span class="line">				<span class="keyword">int</span> to = edge[e].to;</span><br><span class="line">				<span class="keyword">if</span> (edge[e].flow &amp;&amp; dis[to] == oo) &#123;</span><br><span class="line">					dis[to] = dis[x] + <span class="number">1</span>;</span><br><span class="line">					q.push(to);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (dis[N] != oo);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == N || mx == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> mx;</span><br><span class="line">		<span class="keyword">int</span> pans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> &amp;e = first[x]; e; e = edge[e].next) &#123;</span><br><span class="line">			<span class="keyword">int</span> to = edge[e].to;</span><br><span class="line">			<span class="keyword">if</span> (edge[e].flow &amp;&amp; <span class="number">1</span> + dis[x] == dis[to]) &#123;</span><br><span class="line">				<span class="keyword">int</span> flow = dfs (to, min(mx, edge[e].flow));</span><br><span class="line">				<span class="keyword">if</span> (flow) &#123;</span><br><span class="line">					pans += flow;</span><br><span class="line">					mx -= flow;</span><br><span class="line">					edge[e ^ <span class="number">1</span>].flow += flow;</span><br><span class="line">					edge[e].flow -= flow;</span><br><span class="line">					<span class="keyword">if</span> (!mx)</span><br><span class="line">						<span class="keyword">return</span> pans;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> pans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> fans = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i ++)</span><br><span class="line">				first[i] = point[i];</span><br><span class="line">			fans += dfs (<span class="number">0</span>, oo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; L, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; R, <span class="built_in">vector</span> &lt;pii&gt; E)</span> </span>&#123;</span><br><span class="line">		N = L.size() + R.size() + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size(); i ++) &#123;</span><br><span class="line">			add (<span class="number">0</span>, i + <span class="number">1</span>, L[i]);</span><br><span class="line">			add (i + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R.size(); i ++) &#123;</span><br><span class="line">			add (L.size() + i + <span class="number">1</span>, N, R[i]);</span><br><span class="line">			add (N, L.size() + i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E.size(); i ++) &#123;</span><br><span class="line">			add (E[i].F + <span class="number">1</span>, E[i].S + L.size() + <span class="number">1</span>, oo);</span><br><span class="line">			add (E[i].S + L.size() + <span class="number">1</span>, E[i].F + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Dinic();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; fans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line">	<span class="built_in">vector</span> &lt;pii&gt; edge;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">		<span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">		c.push_back(x1);	c.push_back(x2 + <span class="number">1</span>);</span><br><span class="line">		r.push_back(y1);	r.push_back(y2 + <span class="number">1</span>);</span><br><span class="line">		ins[i][<span class="number">0</span>][<span class="number">0</span>] = x1, ins[i][<span class="number">0</span>][<span class="number">1</span>] = y1;</span><br><span class="line">		ins[i][<span class="number">1</span>][<span class="number">0</span>] = x2, ins[i][<span class="number">1</span>][<span class="number">1</span>] = y2;</span><br><span class="line">	&#125;</span><br><span class="line">	c.push_back(n + <span class="number">1</span>);</span><br><span class="line">	r.push_back(n + <span class="number">1</span>);</span><br><span class="line">	sort(c.begin(), c.end());</span><br><span class="line">	sort(r.begin(), r.end());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.size() - <span class="number">1</span>; i ++)</span><br><span class="line">		left.push_back(c[i + <span class="number">1</span>] - c[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.size() - <span class="number">1</span>; i ++)</span><br><span class="line">		right.push_back(r[i + <span class="number">1</span>] - r[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.size() - <span class="number">1</span>; i ++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.size() - <span class="number">1</span>; j ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k ++)</span><br><span class="line">				<span class="keyword">if</span> (ins[k][<span class="number">0</span>][<span class="number">0</span>] &lt;= c[i] &amp;&amp; c[i + <span class="number">1</span>] - <span class="number">1</span> &lt;= ins[k][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">					&amp;&amp; ins[k][<span class="number">0</span>][<span class="number">1</span>] &lt;= r[j] &amp;&amp; r[j + <span class="number">1</span>] - <span class="number">1</span> &lt;= ins[k][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">					edge.push_back(MP(i, j));</span><br><span class="line">	Flow::main(left, right, edge);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="F-GCD-Groups-2"><a href="#F-GCD-Groups-2" class="headerlink" title="F. GCD Groups 2"></a>F. GCD Groups 2</h4><p>Statement: Given an array of n ($2 \leq n \leq 10^5$) integers, splite them into two groups so that the GCDs of both groups equal to one.</p>
<p>Tutorial: </p>
<ul>
<li>The vital feature to open this problem is that each number has no more than k=9 divisors.</li>
<li>If the answer is YES, every number could be put into a group with size no more than 9, because at most 9 numbers are vital to keep GCD down to 1.</li>
<li>First, we randomly selected two numbers and assert them to be in different groups. The failing possibility of this step is negligible.</li>
<li>Then, it’s easy to construct a subset DP with $O(n*2^{2k})$ complexity. Only $2^{2k}$ states are important to reduce the GCD down to 1.</li>
<li>Observing closer, we find that we only need no more than 2*k candidates for each prime. Therefore, we pre-calculated the relationship between n numbers and k primes, and reduced the complexity of DP to $O(nk + k^22^{2k})$.</li>
</ul>
<p>The code below is randomization + greedy. Don’t ask my why…It’s neat. :D</p>
<p>The idea of only choosing useful elements, as implemented below, is also non-trivial.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">if</span> (!a||!b)<span class="keyword">return</span> a+b; <span class="keyword">return</span> gcd (b, a % b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">pair</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> bel[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> g = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		g = gcd (g, a[i].F);</span><br><span class="line">	<span class="keyword">return</span> (g != <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> v, i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; v, a[i] = MP(v, i);</span><br><span class="line">	<span class="keyword">if</span> (fail()) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> CNT = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (((++CNT)&amp;<span class="number">127</span>)==<span class="number">0</span> &amp;&amp; TIME &gt; <span class="number">0.45</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="comment">// cerr &lt;&lt; &quot;loop TIME: &quot; &lt;&lt; CNT &lt;&lt; endl;</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		random_shuffle(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> g1 = <span class="number">0</span>, g2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">			<span class="keyword">int</span> pre = gcd (g1, a[i].F);</span><br><span class="line">			<span class="keyword">if</span> (pre != g1)</span><br><span class="line">				g1 = pre, bel[a[i].S] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				g2 = gcd (g2, a[i].F), bel[a[i].S] = <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (g1 == <span class="number">1</span> &amp;&amp; g2 == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; bel[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Competitions</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用攻略</title>
    <url>/2019-07-28-Markdown%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5.html</url>
    <content><![CDATA[<h2 id="前置技能：Markdown"><a href="#前置技能：Markdown" class="headerlink" title="前置技能：Markdown"></a>前置技能：Markdown</h2><h3 id="一、Markdown-是什么"><a href="#一、Markdown-是什么" class="headerlink" title="一、Markdown 是什么"></a>一、Markdown 是什么</h3><p>Markdown 是一种标记语言。在写作时，你的所有文字都是没有样式的纯文本，在其中插入若干 Markdown 标记后，被标记的文字便有了样式。样式将会在渲染的时候呈现，并且样式的显示效果由 Markdown 工具决定。</p>
<p>比如，在你所写的文字中，你希望某一行的最终排版呈现一级标题的样式，那就给这行文字加个一级标题的标记；某个地方有两个字需要加粗，那就给这两个字加个粗体标记，最终的排版效果中这两字就会是粗体模样。</p>
<a id="more"></a>
<h3 id="二、Markdown-的使用方法"><a href="#二、Markdown-的使用方法" class="headerlink" title="二、Markdown 的使用方法"></a>二、Markdown 的使用方法</h3><p>前面说了，Markdown 其实就是给文章内容作标记，把某处内容标记成什么那它最终就呈现对应的样式，而这些标记是一些简单的符号。</p>
<p>那 Markdown 标记都有哪些，样式效果是怎么的呢？</p>
<p><strong>常用的标记</strong></p>
<h4 id="1-二级标题"><a href="#1-二级标题" class="headerlink" title="1. 二级标题"></a>1. 二级标题</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">## 这是二级标题</span><br></pre></td></tr></table></figure>
<h4 id="2-三级标题"><a href="#2-三级标题" class="headerlink" title="2. 三级标题"></a>2. 三级标题</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">### 这是三级标题</span><br></pre></td></tr></table></figure>
<h4 id="3-四级标题"><a href="#3-四级标题" class="headerlink" title="3. 四级标题"></a>3. 四级标题</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#### 这是四级标题</span><br></pre></td></tr></table></figure>
<h4 id="4-粗体"><a href="#4-粗体" class="headerlink" title="4. 粗体"></a>4. 粗体</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是**粗体**</span><br></pre></td></tr></table></figure>
<h4 id="5-引用"><a href="#5-引用" class="headerlink" title="5. 引用"></a>5. 引用</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 这是引用</span><br></pre></td></tr></table></figure>
<h4 id="6-有序列表"><a href="#6-有序列表" class="headerlink" title="6. 有序列表"></a>6. 有序列表</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Markdown 中列表有两种：</span><br><span class="line"></span><br><span class="line">1. 有序列表，像这样带序号的。其写法是：每项的序号以数字、点、空格组成</span><br><span class="line">2. 无序列表，不带序号的，也就是后面那种</span><br></pre></td></tr></table></figure>
<h4 id="7-无序列表"><a href="#7-无序列表" class="headerlink" title="7. 无序列表"></a>7. 无序列表</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">无序列表有两种相同效果的写法：</span><br><span class="line"></span><br><span class="line">* 用 * 和一个空格开头</span><br><span class="line">- 用 - 和一个空格开头</span><br><span class="line"></span><br><span class="line">一个列表中我们应该始终用同一种写法，不用混用 * 和 -</span><br></pre></td></tr></table></figure>
<h4 id="8-链接"><a href="#8-链接" class="headerlink" title="8. 链接"></a>8. 链接</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[这是链接文本](https://xx.xx/xx)</span><br></pre></td></tr></table></figure>
<h4 id="9-插入图片"><a href="#9-插入图片" class="headerlink" title="9. 插入图片"></a>9. 插入图片</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![任意图片名称](https://picture-gallery.oss-cn-shanghai.aliyuncs.com/markdown/markdown_logo.png)</span><br></pre></td></tr></table></figure>
<h4 id="10-插入表格"><a href="#10-插入表格" class="headerlink" title="10. 插入表格"></a>10. 插入表格</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">| 表头1 | 表头2 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 单元格1 | 单元格2 |</span><br><span class="line">| 单元格3 | 单元格4 |</span><br></pre></td></tr></table></figure>
<p><strong>不常用但可能会用到的标记</strong></p>
<h4 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">```python</span><br><span class="line">print(&#x27;代码块表示多行代码，使用```来开头和结尾代码块&#x27;)</span><br><span class="line">print(&#x27;语言标识可选，若有则可自动高亮代码元素&#x27;)</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<h4 id="2-行内代码"><a href="#2-行内代码" class="headerlink" title="2. 行内代码"></a>2. 行内代码</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是行内代码 `echo 行内代码嵌入在某一行文本中</span><br></pre></td></tr></table></figure>
<h4 id="3-一级标题"><a href="#3-一级标题" class="headerlink" title="3. 一级标题"></a>3. 一级标题</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br></pre></td></tr></table></figure>
<h4 id="4-五级标题"><a href="#4-五级标题" class="headerlink" title="4. 五级标题"></a>4. 五级标题</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">##### 这是五级标题</span><br></pre></td></tr></table></figure>
<h4 id="5-六级标题"><a href="#5-六级标题" class="headerlink" title="5. 六级标题"></a>5. 六级标题</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>
<h4 id="6-分割线"><a href="#6-分割线" class="headerlink" title="6. 分割线"></a>6. 分割线</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>
<h4 id="7-斜体"><a href="#7-斜体" class="headerlink" title="7. 斜体"></a>7. 斜体</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是*斜体*</span><br></pre></td></tr></table></figure>
<h4 id="8-删除线"><a href="#8-删除线" class="headerlink" title="8. 删除线"></a>8. 删除线</h4><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是~~删除线~~</span><br></pre></td></tr></table></figure></h2><h3 id="三、图床"><a href="#三、图床" class="headerlink" title="三、图床"></a>三、图床</h3><p>之前介绍了 Markdown 插入图片的方式：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![任意图片名称](https://xx.xx/xx)</span><br></pre></td></tr></table></figure>
<p>这里演示的链接是网络链接，其实也可以使用本地图片的的文件路径，形式如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![任意图片名称](C:\Documents\sample.png)</span><br></pre></td></tr></table></figure>
<h3 id="四、Markdown-标记的典型使用"><a href="#四、Markdown-标记的典型使用" class="headerlink" title="四、Markdown 标记的典型使用"></a>四、Markdown 标记的典型使用</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul>
<li>文章的顶层标题使用<strong>二级标题</strong></li>
<li>每个小节的标题使用<strong>三级标题</strong></li>
<li>小节中进一步分层组织时使用<strong>四级标题</strong></li>
<li>尽量少用<strong>五级标题</strong>和<strong>六级标题</strong>，考虑用有序列表和无序列表代替</li>
<li>完全不用<strong>一级标题</strong></li>
</ul>
<h4 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h4><p>需要强调某处内容时使用<strong>粗体</strong>。<br>在中文排版中不使用<strong>斜体</strong>。在英文排版中可用斜体表达强调，或表示书名、题目。</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>以下情况使用引用标记：</p>
<ul>
<li>引述内容时（也可直接用引号替代）</li>
<li>作示例时</li>
<li>给出提示、警告等额外说明时</li>
</ul>
<h4 id="行内代码、代码块"><a href="#行内代码、代码块" class="headerlink" title="行内代码、代码块"></a>行内代码、代码块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`<span class="built_in">echo</span> <span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>Markdown 中使用<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![图片名称](https://xx.xx/xx)</span><br></pre></td></tr></table></figure><br>来插入图片，这里的「图片名称」可以任取，但是推荐使用对图片主题具有描述性的文字。因为在一些网站或软件中，图片无法加载时会显示这个「图片名称」，这时至少还能给读者传递出一点有用信息。</p>
<h3 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h3><p>前面总共介绍了 18 种 Markdown 标记，其实常用的也就 10 种左右，这些标记符号都很简单，不出二十分钟便能全部记住。以后在写作的时候请尽量去使用 Markdown，一方面反复的练习会使你牢牢记住各种标记符号，使用时信手拈来；另一方面，Markdown 的使用会大大方便你写作，减少排版带来的负担。请坚信 Markdown 会为你带来生产力的提升。</p>
<ul>
<li>学习自<strong>知乎</strong>，<strong>代码之外的自我修养</strong>专栏，作者<strong>黄浮云</strong></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>function testing</title>
    <url>/2019-07-27-function-testing.html</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  s = <span class="string">&quot;Hello World！&quot;</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019-07-26-MyFirstBlog.html</url>
    <content><![CDATA[<p>Simulated-Anneal, this is your new start.</p>
]]></content>
  </entry>
</search>
