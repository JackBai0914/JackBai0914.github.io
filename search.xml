<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CFRecording</title>
      <link href="/2020-04-12-CFRecording.html"/>
      <url>/2020-04-12-CFRecording.html</url>
      
        <content type="html"><![CDATA[<p>不想再拖了。CF上红名不难，难的是在心中燃起不灭之火。开始吧。</p><a id="more"></a><p>Initial Rating: <strong>2161</strong></p><h3 id="2020-4-12-CR633-Div-1"><a href="#2020-4-12-CR633-Div-1" class="headerlink" title="2020.4.12 CR633 Div 1"></a>2020.4.12 CR633 Div 1</h3><ul><li>Ranked 534 out of 1392</li><li>Rating: (+1) 2161 -&gt; <strong>2162</strong> </li><li>总结<ul><li>从过程上看，发挥中等。因思维生疏而导致想A (观察结论题) 和B (图论思维题)的时间过长；因手指生疏而导致写A错了三次 (本质也是没想清)，写C (找规律题)写得很复杂。</li><li>等级分的变化比较让我感到安慰。这说明，我只要正常发挥，稳定的做出该做的(三道)题，等级分是不会下降的。不过想要上红，一是要增加思考速度+手速，二是要积极思考D。<strong>不做出D，是很难上红的。</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Competitions </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客操作指南：域名，hexo，本地存储结构</title>
      <link href="/2020-02-09-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html"/>
      <url>/2020-02-09-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html</url>
      
        <content type="html"><![CDATA[<p>启用博客啦！记录一些操作的步骤，以免以后忘记。</p><a id="more"></a><h3 id="1-域名相关"><a href="#1-域名相关" class="headerlink" title="1.域名相关"></a>1.域名相关</h3><p>域名从阿里云平台购买。需登录阿里云平台进行续费和解析等操作。</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>我在阿里云上注册了域名：simulated-anneal.info，我想将其解析到我在github上的主页：jackbai0914.github.io。</p><p>将域名解析到<a href="http://jackbai.github.io上，需要添加两条解析：" target="_blank" rel="noopener">http://jackbai.github.io上，需要添加两条解析：</a></p><ul><li>先添加一个CNAME记录类型，主机记录写@，后面记录值写上<a href="http://jackbai0914.github.io" target="_blank" rel="noopener">http://jackbai0914.github.io</a></li><li>再添加一个CNAME记录类型，主机记录写www，后面记录值也是<a href="http://jackbai0914.github.io" target="_blank" rel="noopener">http://jackbai0914.github.io</a></li></ul><p>这样别人用www和不用www都能访问网站（其实www的方式，会先解析成<a href="http://jackbai0914.github.io，然后根据CNAME再变成[simulated-anneal.info](simulated-anneal.info)，即中间经过一次转换）。" target="_blank" rel="noopener">http://jackbai0914.github.io，然后根据CNAME再变成[simulated-anneal.info](simulated-anneal.info)，即中间经过一次转换）。</a></p><blockquote><p>A记录是直接解析到空间IP地址；<br>CNAME是解析到别名；<br>MX是电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器，是设置企业邮箱的;<br>NS是指DNS,用默认的就行,一般不用修改；<br>TXT一般指为某个主机名或域名设置的说明，是企业邮箱的辅助设置。</p></blockquote><p>然后还需在github的库中进行一步操作：</p><ul><li>在master分支下创建名为“CNAME”的文件。</li><li>将内容编辑为“simulated-anneal.info”，即想要绑定的域名。</li><li>在settings中，将Custom domain改为simulated-anneal.info。</li></ul><p>这一步将github的主页重定向到了simulated-anneal.info上。但是博主目前还不理解这一步的目的….</p><h3 id="2-hexo常用命令"><a href="#2-hexo常用命令" class="headerlink" title="2.hexo常用命令"></a>2.hexo常用命令</h3><p>在终端中用hexo命令，可以进行本地编辑博客，生成静态网页，部署博客到github上等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt; <span class="comment">#新建名为&lt;title&gt;的文章，存储在source/_posts中</span></span><br><span class="line">hexo new page &lt;title&gt; <span class="comment">#新建名为&lt;title&gt;的网页，存储在source中</span></span><br><span class="line">hexo new draft &lt;title&gt; <span class="comment">#新建草稿，存储在source/_drafts中</span></span><br><span class="line">hexo new draft &lt;title&gt; <span class="comment">#新建草稿，存储在source/_drafts中</span></span><br><span class="line">hexo publish [layout] &lt;title&gt; <span class="comment">#将文件移到source/_posts中</span></span><br><span class="line"></span><br><span class="line">hexo generate <span class="comment">#生成静态网页</span></span><br><span class="line">hexo generate --watch <span class="comment">#监视文件变动</span></span><br><span class="line">hexo deploy <span class="comment">#部署网页至github上</span></span><br><span class="line">hexo server <span class="comment">#启动网页预览</span></span><br><span class="line">hexo server -p 2333 <span class="comment">#将预览端口改为2333</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，网页正常情况下可以忽略此条命令。执行该指令后。会删掉站点根目录下的public文件夹。明白了吧，public即存储生成的静态网页。</span></span><br><span class="line"></span><br><span class="line">hexo deploy --generate <span class="comment">#在生成完毕后自动部署网站</span></span><br></pre></td></tr></table></figure><h3 id="3-本地存储结构"><a href="#3-本地存储结构" class="headerlink" title="3.本地存储结构"></a>3.本地存储结构</h3><ul><li><p>sources：修改文章和博客结构的地方。</p></li><li><p>themes：存储博客外观主题的地方。</p><ul><li>NexT/_config.yml：外观主题的settings。</li></ul></li><li>scaffolds：文章模版库。</li><li>public：存储生成的静态网页的地方，一般不要修改。</li><li>_config.yml：博客settings。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宾夕法尼亚大学 访校印象</title>
      <link href="/2019-08-27-UPenn.html"/>
      <url>/2019-08-27-UPenn.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>学校名称：University of Pennsylvania</p><p>位置: Philadelphia, PA 19104</p><p>排名：综合性大学排名第8（2018 US News）</p><p>在校生人数：21, 826</p><p>录取率：9.3% （2017）</p><p>国际生比例：6.6%</p><p>学费（不含食宿）：45, 556</p><p>课堂大小：83%的课堂少于30人</p><p>SAT：阅读 680-750；数学 690-770（2017）</p><p>ACT：32-35（2017）</p><p>托福：100 （最低要求80）</p><a id="more"></a><h3 id="校园环境"><a href="#校园环境" class="headerlink" title="校园环境"></a>校园环境</h3><p>宾大的校园不大不小，主要建筑之间的距离不远。建筑的主要色调是红色，风格比较古老。我们沿着Locust Walk一路走，环境很好，各个建筑就散布在周围。</p><p>我们先到了学校的图书馆Van pelt。里面学生不多，但是看起来都在安静，认真地学习。学生用的电脑设备很好，我看到了一个学生在用带弧形的双屏读论文写报告。从图书馆出来，我们能看见著名的纽扣和富兰克林的雕塑。</p><p>走到Locust Walk的尽头就来到了Warton商学院的位置。这栋建筑从外面看不显眼，但这是宾大的核心，是排名第一的商学院。我们正好赶上了2020届新生的入学仪式，发现Warton的各个Cohert竟然都是以货币单位命名的…</p><h3 id="学术能力：寻问招生官"><a href="#学术能力：寻问招生官" class="headerlink" title="学术能力：寻问招生官"></a>学术能力：寻问招生官</h3><p>从宾大以后的学校，我都有机会参加AO的information session或者现场找AO问问题。我第一次主动找招生官，表现的还是比较局促。之后要多问一些问题，对每个问题都有一些跟进，尤其是在自己喜欢的学校。</p><p>我首先询问了关于计算机专业的问题：是否有CS相关的非CS专业？AO告诉我是没有的。然后他给我仔细介绍了学生如何选择多个自己喜欢的专业：1/3的宾大学生都会选择major + minor的形式。而对于计算机，大部分人都会放在minor的位置，作为自己研究其他专业的一个工具。major的课程需要完成core的30门课程，而minor的课程只有十几门必修课。</p><p>进一步地，CS的专业在文理学院和工程院都有开设。一般人minor的都会是文理学院的那一个，它可能深度较浅但是较广。如果major工程院的CS专业，AO说，那很少有人会再minor其他的专业，因为工程院对CS对major的要求会比较高。</p><h3 id="申请相关"><a href="#申请相关" class="headerlink" title="申请相关"></a>申请相关</h3><p>我也询问了招生官关于申请的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Q: 申请中什么最重要？</span><br><span class="line"></span><br><span class="line">A: AO传递的最主要的信息是，out-of-classroom与学术能力一样重要；Show us who you are是申请最主要的目标。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Q: 活动列表应该怎样安排？</span><br><span class="line"></span><br><span class="line">A: 写对我影响最大，最重要的活动。当然，我也应该考虑到，这些活动group together以后会给招生官展现怎样的自己。最后，多余的活动也可以作为补充信息，做成resume交上去。</span><br></pre></td></tr></table></figure><h3 id="额外信息"><a href="#额外信息" class="headerlink" title="额外信息"></a>额外信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Q：能评价下费城是个怎样的城市吗？</span><br><span class="line">Lynn：文化氛围比较浓厚，城市中心有很地标性的建筑。虽然建筑风格比较老，玩乐也不像纽约那么丰富，但是该有的娱乐设施都有，能找到好吃的餐馆和KTV。整个城市的设计感觉会和国内比较像：比较紧凑不需要车，不过活动半径并不是特别大。</span><br><span class="line"></span><br><span class="line">Q：那学校的人文环境怎么样？</span><br><span class="line">Ni Ruoyang：因为是一个职业型（Pre-professional）大学，大家都想去沃顿，所以几乎没有人文环境。很多社团的运作都很商业化。</span><br><span class="line">刘奕麟：在宾大很容易会把自己禁锢在商业生活中。其实校园还是很多元的，想找肯定能找到人文氛围，也有学生互相辩论聊天地、聊政治的社团。</span><br><span class="line"></span><br><span class="line">Q：学校的强势学科有哪些？</span><br><span class="line">刘奕麟：沃顿有很多业界中最好的教授，所有人都争取在大四毕业前抢到最好的教授，管理的老师。文理院里面，宾大的经济和政治学挺强的。</span><br><span class="line"></span><br><span class="line">Q：学校除了商科以外，还有什么别的强势科目吗？只有商科好是一个误区吗？</span><br><span class="line">Lynn：宾大肯定是以商业为主。不可否认的是，我们学校的文理学院还是比较强的，文学和艺术史也比较强。在学校进来之后能申请双学位（Dual Degree），很多非商科的人也会选择商科作为第二学位。大一入学前就要申请的双学位项目有M&amp;T，Huntsman。这种双学位项目出来发展也很好的。</span><br><span class="line"></span><br><span class="line">Q：学校的必修课和选修课有哪些？</span><br><span class="line">刘奕麟：学校的体育课程不算分。要求的话和别的大学类似，分通识课和专业课。毕业要完成通识课，7个不同科目型的要求（Sectors），还有专业课及自由选修课。</span><br><span class="line"></span><br><span class="line">Q：平时课业压力大吗？</span><br><span class="line">Ni Ruoyang：在沃顿，课业并不会过于繁重，会根据大家的表现给分（Grade on a Curve）。沃顿的压力可能不在他们的课业难度上，课堂上会有很多以小组为单位进行的案例研究。这样的实战案例通常会占用很大的时间。</span><br><span class="line">刘奕麟：文理院的课业压力还是蛮大的。学校的数学教学比较差。因为注重研究，所以教学质量不一定好，很多老师不会怎么教学生。不过总体来说，你的时间付出和你收获的知识是成正比的。</span><br><span class="line"></span><br><span class="line">作者：Panopath过来人</span><br><span class="line">链接：https://www.zhihu.com/question/24297668/answer/350786305</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> College Application </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哥伦比亚大学 访校印象</title>
      <link href="/2019-08-25-Columbia-University.html"/>
      <url>/2019-08-25-Columbia-University.html</url>
      
        <content type="html"><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉上，哥大是一个精致，古典与现代结合的学校。地理位置优越，生活便利；工科教授的水平一流，学生水平，工程资源一般；需要主动利用资源。</p><p>总体感觉挺好的。也有朋友和父母熟人在旁边。只是在最繁华的市中心度过4年，不知道是否能保持学术的初心？</p><a id="more"></a><h3 id="校园环境"><a href="#校园环境" class="headerlink" title="校园环境"></a>校园环境</h3><p>学校坐落在纽约市中心，曼哈顿岛的中部，大约在110-120街区。中心是一个图书馆和一个大草坪，还有一个圆顶式建筑。吉祥物是狮子，不过实在有点瘦…</p><p>学校占地面积小。不过教学楼不仅在“校区”里，而是和城市融合。工学院的楼(Science Building)比较新。</p><p>据学长说，吃饭的地方很多，中餐很好。生活很方便，“开学背个电脑去就完事儿了”。</p><p>工学院的楼下有独立的咖啡厅。走过的时候，看见两个学生安静的一起坐在那里指尖飞舞。一杯咖啡，一个并肩探索的同学，在这里待一整天，也挺让人安心的。</p><h3 id="学术能力"><a href="#学术能力" class="headerlink" title="学术能力"></a>学术能力</h3><p>按学长的话说，CS专业的学生普遍不是很厉害(厉害的都去MIT&amp;Stanford&amp;Princeton了)，但是教授很厉害(包括几个图灵奖+算法导论的作者)。可以跳课，可以修研究生课程；可以上上数学系的课，因为哥大纯数也挺好。</p><p>学长指出哥大的CS偏向理论。这其实挺好(比宾大好多了)，毕竟精通理论是之后做事情的必要条件。</p><p>哥大的人文Core对于工程院的学生选修，但是大部分同学还是会选一些。包括一些很好的通识课程，能让我浅层次地了解一些历史，哲学的知识。</p>]]></content>
      
      
      <categories>
          
          <category> College Application </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一道划痕</title>
      <link href="/2019-08-08-%E5%8F%8D%E6%80%9D.html"/>
      <url>/2019-08-08-%E5%8F%8D%E6%80%9D.html</url>
      
        <content type="html"><![CDATA[<p>现在的状态，不能支撑你到达彼岸。</p><a id="more"></a><p>你变成了一个爱偷懒的人。之前跑的太累了是你的借口，于是现在就“暂时性”的放松。你不知道申请是你的最后一搏吗？没有了锐气，斗志和状态，你什么都不是。你是很努力的奔跑过。可是这不代表你现在就有休息的权利。冲刺的时候休息。你会发现那些弱智的同学也能超过你。这不可怕吗？</p><p>你像以前一样无视规矩。可是，你难道分不清哪些是为自己好吗？你欠下DDL真的不羞愧吗？一次次的保证，真的不觉得以后会后悔？你连计划，都不会定了。你这样下去，完蛋了。</p><p>还能记起来斯坦福的梦吗？</p><p>热闹的小宿舍，简朴的小房间；像海绵一样的作业，不Carry不爽课堂；做宿舍里第一个起床的人，静听着开水的滚沸和隔壁传来的琴声；清晨6点钟的阳光，Dry Lake旁的落日；性情随和，却对数学嗅觉敏锐的华裔同学，还有，笑容带着酒窝的那个女生……</p><p>这些回忆，我已许久未曾想起。它们闪光的表面也蒙上了灰尘。这也很正常吧？斯坦福啊，对它感兴趣的同学还不够多吗？我是自作多情了，参加了个夏校，就以为发生了什么不得了的事，造就了我们的缘分。可事实是，痴迷斯坦福的人成千上万；99%的人做后都是抱着痛心离开，片面的讲成为失败者。我呢，大不了就是他们之一。</p><p>可是，我为什么又觉得自己不平常呢？每个人都能看到加州六点的晨雾吗？每个人都能在那些红色的房子里，做着assignments兴奋得发抖吗？每个人都会在营里认识几个忘不了的朋友吗？</p><p>真是可笑。剥去执念，我竟真的找不到自己追求的方向了。以后会后悔的。我可不想知道这是一种什么样的感觉，失败者。</p><p>从糊涂的梦里醒过来吧。你还有机会，走向光明。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[Codeforces]CR576 比赛记录</title>
      <link href="/2019-08-03-Codeforces-CR576.html"/>
      <url>/2019-08-03-Codeforces-CR576.html</url>
      
        <content type="html"><![CDATA[<h2 id="Codeforces-Round-576-Div-1"><a href="#Codeforces-Round-576-Div-1" class="headerlink" title="Codeforces Round #576 (Div. 1)"></a>Codeforces Round #576 (<a href="http://codeforces.com/contest/1198/standings" target="_blank" rel="noopener">Div. 1</a>)</h2><h3 id="1-General-Info"><a href="#1-General-Info" class="headerlink" title="1. General Info"></a>1. General Info</h3><ul><li>Problem: ABCD solved, EF unread.</li><li>Ranking: 167 out of 662.</li><li>Rating: 2179 -&gt; 2221 (+42).</li><li>Summary: <ul><li>Mistakenly understood A at first, and wasted two submissions.</li><li>Solved C, a constructive task based on Independent Set and Node Matching.</li><li>Wasted too much time on D, a brute force with a trivial feature.</li></ul></li></ul><a id="more"></a><h3 id="2-Problems"><a href="#2-Problems" class="headerlink" title="2. Problems"></a>2. Problems</h3><h4 id="A-MP3"><a href="#A-MP3" class="headerlink" title="A. MP3"></a>A. MP3</h4><p>Statement: Given n intergers, calculate the maximum numbers of integers we can get by choosing m consecutive values inputed.</p><p>Tutorial: In the contest, I used Two Pointers to go through the sorted sequence. Yet, we can transformed the array into value-indexed form and calculated the prefix.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, I, a[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> L;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> pans = <span class="number">0</span>, fans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; I;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">(I *= <span class="number">8</span>) /= n;</span><br><span class="line"><span class="keyword">if</span> (I &gt; <span class="number">30</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">L = (<span class="number">1</span> &lt;&lt; I);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (j + <span class="number">1</span> &lt;= n &amp;&amp; a[j + <span class="number">1</span>] == a[i])</span><br><span class="line">j ++;</span><br><span class="line"><span class="keyword">int</span> num = j - i + <span class="number">1</span>;</span><br><span class="line">v.push_back(num);</span><br><span class="line"></span><br><span class="line">pans += num;</span><br><span class="line"><span class="keyword">if</span> (v.size() &gt; L)</span><br><span class="line">pans -= v[v.size() - <span class="number">1</span> - L];</span><br><span class="line"><span class="comment">// cerr &lt;&lt; num &lt;&lt; " " &lt;&lt; pans &lt;&lt; endl;</span></span><br><span class="line">fans = max (fans, pans);</span><br><span class="line">i = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n - fans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-Welfare-State"><a href="#B-Welfare-State" class="headerlink" title="B. Welfare State"></a>B. Welfare State</h4><p>Statement: Given a array of n integers, support two operations: 1) modify one value. 2) input v, apply <script type="math/tex">a_i = max (a_i, v)</script> to every i. Output the value of every integers in the end.</p><p>Tutorial: In the contest, I coded a SegTree with lazy mark within 10 minutes, achieving $O(nlogn)$ time. However, noticing that only one Option 2 will be useful and Option 1&amp;2 wouldn’t influence each other, we can calculate options independentely and combine them in the end.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> ins[<span class="number">200020</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> st, ed;</span><br><span class="line">node *l, *r;</span><br><span class="line"><span class="keyword">int</span> lz, v;</span><br><span class="line">node (<span class="keyword">int</span> stt, <span class="keyword">int</span> edd, <span class="keyword">int</span> lzz, <span class="keyword">int</span> vv, node *L, node *R) &#123;</span><br><span class="line">st = stt, ed = edd, lz = <span class="number">-1</span>, v = vv, l = L, r = R;</span><br><span class="line">&#125;</span><br><span class="line">&#125; *pnode;</span><br><span class="line"><span class="function">pnode <span class="title">build</span> <span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (st == ed) &#123;</span><br><span class="line">pnode ne = <span class="keyword">new</span> node (st, ed, <span class="number">0</span>, ins[st], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ne;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (st + ed) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">pnode ne = <span class="keyword">new</span> node (st, ed, <span class="number">0</span>, <span class="number">0</span>, build (st, mid), build (mid + <span class="number">1</span>, ed));</span><br><span class="line"><span class="keyword">return</span> ne;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span> <span class="params">(pnode r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r || !r-&gt;l)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span> (r-&gt;lz != <span class="number">-1</span>) &#123;</span><br><span class="line">r-&gt;l-&gt;lz = max (r-&gt;l-&gt;lz, r-&gt;lz);</span><br><span class="line">r-&gt;r-&gt;lz = max (r-&gt;r-&gt;lz, r-&gt;lz);</span><br><span class="line">r-&gt;l-&gt;v = max (r-&gt;l-&gt;v, r-&gt;lz);</span><br><span class="line">r-&gt;r-&gt;v = max (r-&gt;r-&gt;v, r-&gt;lz);</span><br><span class="line">r-&gt;lz = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cover</span> <span class="params">(pnode r, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (st &lt;= r-&gt;st &amp;&amp; r-&gt;ed &lt;= ed) &#123;</span><br><span class="line">r-&gt;lz = max (r-&gt;lz, v);</span><br><span class="line">r-&gt;v = max (r-&gt;v, v);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">down (r);</span><br><span class="line"><span class="keyword">if</span> (st &lt;= r-&gt;l-&gt;ed)cover (r-&gt;l, st, ed, v);</span><br><span class="line"><span class="keyword">if</span> (r-&gt;r-&gt;st &lt;= ed)cover (r-&gt;r, st, ed, v);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span> <span class="params">(pnode r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r-&gt;st == r-&gt;ed) &#123;</span><br><span class="line">r-&gt;v = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">down (r);</span><br><span class="line"><span class="keyword">if</span> (p &lt;= r-&gt;l-&gt;ed)modify(r-&gt;l, p, v);</span><br><span class="line"><span class="keyword">if</span> (r-&gt;r-&gt;st &lt;= p)modify(r-&gt;r, p, v);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span> <span class="params">(pnode r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r-&gt;st == r-&gt;ed) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r-&gt;v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">down (r);</span><br><span class="line">order(r-&gt;l);</span><br><span class="line">order(r-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ins[i];</span><br><span class="line">pnode root = build (<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> tp, a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tp;</span><br><span class="line"><span class="keyword">if</span> (tp == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">modify(root, a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tp == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">cover (root, <span class="number">1</span>, n, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">order(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-Matching-vs-Independent-Set"><a href="#C-Matching-vs-Independent-Set" class="headerlink" title="C. Matching vs Independent Set"></a>C. Matching vs Independent Set</h4><p>Statement: Given a graph with 3*n vertices and m edges, find either a matching of n edges, or an independent set of n vertices.</p><p>Tutorial: </p><ul><li>Calculating the Maximum Independent Set and the Maximum Matching of a graph both have high time complexity, so we need to think about the unique feature of this task.</li><li>3*n vertices are the strongest hint. We add edges to a matching greedily till no new edge can be added. Then, it’s easy to see we must achieved one of the conditions.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span> &#123;</span><span class="keyword">int</span> to, next;&#125; edge[<span class="number">5000050</span>];</span><br><span class="line"><span class="keyword">int</span> point[<span class="number">3000030</span>], te = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">te ++;</span><br><span class="line">edge[te].to = v;</span><br><span class="line">edge[te].next = point[u];</span><br><span class="line">point[u] = te;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">3000030</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; rec;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T --) &#123;</span><br><span class="line">te = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; i ++)</span><br><span class="line">point[i] = flag[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a, b, i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">add (a, b);add (b, a);</span><br><span class="line">&#125;</span><br><span class="line">rec.resize(<span class="number">0</span>);</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag[i])</span><br><span class="line"><span class="keyword">continue</span> ;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = point[i]; e; e = edge[e].next) &#123;</span><br><span class="line"><span class="keyword">int</span> to = edge[e].to;</span><br><span class="line"><span class="keyword">if</span> (!flag[to]) &#123;</span><br><span class="line">flag[to] = flag[i] = <span class="number">1</span>;</span><br><span class="line">rec.push_back(e / <span class="number">2</span>);</span><br><span class="line">cnt ++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= n) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Matching"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; rec[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IndSet"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n &amp;&amp; ans &lt; n; i ++)</span><br><span class="line"><span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="D-Rectangle-Painting-1"><a href="#D-Rectangle-Painting-1" class="headerlink" title="D. Rectangle Painting 1"></a>D. Rectangle Painting 1</h4><p>Statement: A square grid of size n<em>n ($n \leq 50$) has some cells colored in black. Colored a rectangle of size h </em> w into white requires $max(h, w)$ costs. Calculate the miminum cost to whiten the whole grid.</p><p>Tutorial: The necessary condition of costing less than n is to leave one column uncovered. This feature suggests us to use DP on rectangles, with $O(n^4)$ states and $O(n)$ time to calculate one state, enumerating the missing column.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">55</span>][<span class="number">55</span>], s[<span class="number">2</span>][<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> rec[<span class="number">55</span>][<span class="number">55</span>][<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> stx, <span class="keyword">int</span> sty, <span class="keyword">int</span> edx, <span class="keyword">int</span> edy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (edx &lt; stx || edy &lt; sty)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (~rec[stx][sty][edx][edy])</span><br><span class="line"><span class="keyword">return</span> rec[stx][sty][edx][edy];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sum[edx][edy] - sum[stx - <span class="number">1</span>][edy] - sum[edx][sty - <span class="number">1</span>] + sum[stx - <span class="number">1</span>][sty - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">rec[stx][sty][edx][edy] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">rec[stx][sty][edx][edy] = max (edx - stx + <span class="number">1</span>, edy - sty + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = stx; x &lt;= edx; x ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>][x][edy] - s[<span class="number">0</span>][x][sty - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span> ;</span><br><span class="line">rec[stx][sty][edx][edy] = min (rec[stx][sty][edx][edy], </span><br><span class="line">dfs (stx, sty, x - <span class="number">1</span>, edy) + dfs (x + <span class="number">1</span>, sty, edx, edy));</span><br><span class="line"><span class="keyword">if</span> (dfs (stx, sty, x - <span class="number">1</span>, edy) &gt;= rec[stx][sty][edx][edy])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = sty; y &lt;= edy; y ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">1</span>][edx][y] - s[<span class="number">1</span>][stx - <span class="number">1</span>][y] != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span> ;</span><br><span class="line">rec[stx][sty][edx][edy] = min (rec[stx][sty][edx][edy], </span><br><span class="line">dfs (stx, sty, edx, y - <span class="number">1</span>) + dfs (stx, y + <span class="number">1</span>, edx, edy));</span><br><span class="line"><span class="keyword">if</span> (dfs (stx, sty, edx, y - <span class="number">1</span>) &gt;= rec[stx][sty][edx][edy])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rec[stx][sty][edx][edy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">mp[i][j] = (c == <span class="string">'#'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">sum[i][j] = mp[i][j] + sum[i][j - <span class="number">1</span>] + sum[i - <span class="number">1</span>][j] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">s[<span class="number">0</span>][i][j] = s[<span class="number">0</span>][i][j - <span class="number">1</span>] + mp[i][j];</span><br><span class="line">s[<span class="number">1</span>][i][j] = s[<span class="number">1</span>][i - <span class="number">1</span>][j] + mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(rec, <span class="number">-1</span>, <span class="keyword">sizeof</span> rec);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs (<span class="number">1</span>, <span class="number">1</span>, n, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// cerr &lt;&lt; TIME &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="E-Rectangle-Painting-2"><a href="#E-Rectangle-Painting-2" class="headerlink" title="E. Rectangle Painting 2"></a>E. Rectangle Painting 2</h4><p>Statement: A square grid of size n<em>n ($n \leq 10^9$) has some cells colored in black， which are the union of m ($m \leq 50$) rectangles. Colored a rectangle of size h </em> w into white requires $min(h, w)$ costs. Calculate the miminum cost to whiten the whole grid.</p><p>Tutorial: </p><ul><li>Couldn’t find an easier Flow problem…</li><li>The unwritten feature of this problem is that we are actually choosing columns and rows. As we construct a bipartite graph, we want to find the minimal vertex cover, which equals to the Maximum Flow. </li><li>The only thing left is to compress identical vertices, to discretize the grid.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//st: 11:55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ins[<span class="number">55</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; c, r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Flow &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">2e9</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> first[<span class="number">1010</span>], point[<span class="number">1010</span>], te = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span> &#123;</span><span class="keyword">int</span> to, next, flow;&#125; edge[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">te ++;</span><br><span class="line">edge[te].to = b;</span><br><span class="line">edge[te].next = point[a];</span><br><span class="line">edge[te].flow = c;</span><br><span class="line">point[a] = te;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1010</span>];</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i ++)</span><br><span class="line">dis[i] = oo;</span><br><span class="line">dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = point[x]; e; e = edge[e].next) &#123;</span><br><span class="line"><span class="keyword">int</span> to = edge[e].to;</span><br><span class="line"><span class="keyword">if</span> (edge[e].flow &amp;&amp; dis[to] == oo) &#123;</span><br><span class="line">dis[to] = dis[x] + <span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (dis[N] != oo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == N || mx == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> mx;</span><br><span class="line"><span class="keyword">int</span> pans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;e = first[x]; e; e = edge[e].next) &#123;</span><br><span class="line"><span class="keyword">int</span> to = edge[e].to;</span><br><span class="line"><span class="keyword">if</span> (edge[e].flow &amp;&amp; <span class="number">1</span> + dis[x] == dis[to]) &#123;</span><br><span class="line"><span class="keyword">int</span> flow = dfs (to, min(mx, edge[e].flow));</span><br><span class="line"><span class="keyword">if</span> (flow) &#123;</span><br><span class="line">pans += flow;</span><br><span class="line">mx -= flow;</span><br><span class="line">edge[e ^ <span class="number">1</span>].flow += flow;</span><br><span class="line">edge[e].flow -= flow;</span><br><span class="line"><span class="keyword">if</span> (!mx)</span><br><span class="line"><span class="keyword">return</span> pans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i ++)</span><br><span class="line">first[i] = point[i];</span><br><span class="line">fans += dfs (<span class="number">0</span>, oo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; L, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; R, <span class="built_in">vector</span> &lt;pii&gt; E)</span> </span>&#123;</span><br><span class="line">N = L.size() + R.size() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size(); i ++) &#123;</span><br><span class="line">add (<span class="number">0</span>, i + <span class="number">1</span>, L[i]);</span><br><span class="line">add (i + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R.size(); i ++) &#123;</span><br><span class="line">add (L.size() + i + <span class="number">1</span>, N, R[i]);</span><br><span class="line">add (N, L.size() + i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E.size(); i ++) &#123;</span><br><span class="line">add (E[i].F + <span class="number">1</span>, E[i].S + L.size() + <span class="number">1</span>, oo);</span><br><span class="line">add (E[i].S + L.size() + <span class="number">1</span>, E[i].F + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">Dinic();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line"><span class="built_in">vector</span> &lt;pii&gt; edge;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">c.push_back(x1);c.push_back(x2 + <span class="number">1</span>);</span><br><span class="line">r.push_back(y1);r.push_back(y2 + <span class="number">1</span>);</span><br><span class="line">ins[i][<span class="number">0</span>][<span class="number">0</span>] = x1, ins[i][<span class="number">0</span>][<span class="number">1</span>] = y1;</span><br><span class="line">ins[i][<span class="number">1</span>][<span class="number">0</span>] = x2, ins[i][<span class="number">1</span>][<span class="number">1</span>] = y2;</span><br><span class="line">&#125;</span><br><span class="line">c.push_back(n + <span class="number">1</span>);</span><br><span class="line">r.push_back(n + <span class="number">1</span>);</span><br><span class="line">sort(c.begin(), c.end());</span><br><span class="line">sort(r.begin(), r.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.size() - <span class="number">1</span>; i ++)</span><br><span class="line">left.push_back(c[i + <span class="number">1</span>] - c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.size() - <span class="number">1</span>; i ++)</span><br><span class="line">right.push_back(r[i + <span class="number">1</span>] - r[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.size() - <span class="number">1</span>; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.size() - <span class="number">1</span>; j ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k ++)</span><br><span class="line"><span class="keyword">if</span> (ins[k][<span class="number">0</span>][<span class="number">0</span>] &lt;= c[i] &amp;&amp; c[i + <span class="number">1</span>] - <span class="number">1</span> &lt;= ins[k][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">&amp;&amp; ins[k][<span class="number">0</span>][<span class="number">1</span>] &lt;= r[j] &amp;&amp; r[j + <span class="number">1</span>] - <span class="number">1</span> &lt;= ins[k][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">edge.push_back(MP(i, j));</span><br><span class="line">Flow::main(left, right, edge);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="F-GCD-Groups-2"><a href="#F-GCD-Groups-2" class="headerlink" title="F. GCD Groups 2"></a>F. GCD Groups 2</h4><p>Statement: Given an array of n ($2 \leq n \leq 10^5$) integers, splite them into two groups so that the GCDs of both groups equal to one.</p><p>Tutorial: </p><ul><li>The vital feature to open this problem is that each number has no more than k=9 divisors.</li><li>If the answer is YES, every number could be put into a group with size no more than 9, because at most 9 numbers are vital to keep GCD down to 1.</li><li>First, we randomly selected two numbers and assert them to be in different groups. The failing possibility of this step is negligible.</li><li>Then, it’s easy to construct a subset DP with $O(n*2^{2k})$ complexity. Only $2^{2k}$ states are important to reduce the GCD down to 1.</li><li>Observing closer, we find that we only need no more than 2*k candidates for each prime. Therefore, we pre-calculated the relationship between n numbers and k primes, and reduced the complexity of DP to $O(nk + k^22^{2k})$.</li></ul><p>The code below is randomization + greedy. Don’t ask my why…It’s neat. :D</p><p>The idea of only choosing useful elements, as implemented below, is also non-trivial.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME (double)clock()/CLOCKS_PER_SEC</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">if</span> (!a||!b)<span class="keyword">return</span> a+b; <span class="keyword">return</span> gcd (b, a % b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> bel[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">g = gcd (g, a[i].F);</span><br><span class="line"><span class="keyword">return</span> (g != <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v, i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v, a[i] = MP(v, i);</span><br><span class="line"><span class="keyword">if</span> (fail()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CNT = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (((++CNT)&amp;<span class="number">127</span>)==<span class="number">0</span> &amp;&amp; TIME &gt; <span class="number">0.45</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// cerr &lt;&lt; "loop TIME: " &lt;&lt; CNT &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">random_shuffle(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> g1 = <span class="number">0</span>, g2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> pre = gcd (g1, a[i].F);</span><br><span class="line"><span class="keyword">if</span> (pre != g1)</span><br><span class="line">g1 = pre, bel[a[i].S] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">g2 = gcd (g2, a[i].F), bel[a[i].S] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (g1 == <span class="number">1</span> &amp;&amp; g2 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bel[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Competitions </category>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用攻略</title>
      <link href="/2019-07-28-Markdown%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5.html"/>
      <url>/2019-07-28-Markdown%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前置技能：Markdown"><a href="#前置技能：Markdown" class="headerlink" title="前置技能：Markdown"></a>前置技能：Markdown</h2><h3 id="一、Markdown-是什么"><a href="#一、Markdown-是什么" class="headerlink" title="一、Markdown 是什么"></a>一、Markdown 是什么</h3><p>Markdown 是一种标记语言。在写作时，你的所有文字都是没有样式的纯文本，在其中插入若干 Markdown 标记后，被标记的文字便有了样式。样式将会在渲染的时候呈现，并且样式的显示效果由 Markdown 工具决定。</p><p>比如，在你所写的文字中，你希望某一行的最终排版呈现一级标题的样式，那就给这行文字加个一级标题的标记；某个地方有两个字需要加粗，那就给这两个字加个粗体标记，最终的排版效果中这两字就会是粗体模样。</p><a id="more"></a><h3 id="二、Markdown-的使用方法"><a href="#二、Markdown-的使用方法" class="headerlink" title="二、Markdown 的使用方法"></a>二、Markdown 的使用方法</h3><p>前面说了，Markdown 其实就是给文章内容作标记，把某处内容标记成什么那它最终就呈现对应的样式，而这些标记是一些简单的符号。</p><p>那 Markdown 标记都有哪些，样式效果是怎么的呢？</p><p><strong>常用的标记</strong></p><h4 id="1-二级标题"><a href="#1-二级标题" class="headerlink" title="1. 二级标题"></a>1. 二级标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## 这是二级标题</span><br></pre></td></tr></table></figure><h4 id="2-三级标题"><a href="#2-三级标题" class="headerlink" title="2. 三级标题"></a>2. 三级标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 这是三级标题</span><br></pre></td></tr></table></figure><h4 id="3-四级标题"><a href="#3-四级标题" class="headerlink" title="3. 四级标题"></a>3. 四级标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 这是四级标题</span><br></pre></td></tr></table></figure><h4 id="4-粗体"><a href="#4-粗体" class="headerlink" title="4. 粗体"></a>4. 粗体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是**粗体**</span><br></pre></td></tr></table></figure><h4 id="5-引用"><a href="#5-引用" class="headerlink" title="5. 引用"></a>5. 引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是引用</span><br></pre></td></tr></table></figure><h4 id="6-有序列表"><a href="#6-有序列表" class="headerlink" title="6. 有序列表"></a>6. 有序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Markdown 中列表有两种：</span><br><span class="line"></span><br><span class="line">1. 有序列表，像这样带序号的。其写法是：每项的序号以数字、点、空格组成</span><br><span class="line">2. 无序列表，不带序号的，也就是后面那种</span><br></pre></td></tr></table></figure><h4 id="7-无序列表"><a href="#7-无序列表" class="headerlink" title="7. 无序列表"></a>7. 无序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">无序列表有两种相同效果的写法：</span><br><span class="line"></span><br><span class="line">* 用 * 和一个空格开头</span><br><span class="line">- 用 - 和一个空格开头</span><br><span class="line"></span><br><span class="line">一个列表中我们应该始终用同一种写法，不用混用 * 和 -</span><br></pre></td></tr></table></figure><h4 id="8-链接"><a href="#8-链接" class="headerlink" title="8. 链接"></a>8. 链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[这是链接文本](https://xx.xx/xx)</span><br></pre></td></tr></table></figure><h4 id="9-插入图片"><a href="#9-插入图片" class="headerlink" title="9. 插入图片"></a>9. 插入图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![任意图片名称](https://picture-gallery.oss-cn-shanghai.aliyuncs.com/markdown/markdown_logo.png)</span><br></pre></td></tr></table></figure><h4 id="10-插入表格"><a href="#10-插入表格" class="headerlink" title="10. 插入表格"></a>10. 插入表格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头1 | 表头2 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 单元格1 | 单元格2 |</span><br><span class="line">| 单元格3 | 单元格4 |</span><br></pre></td></tr></table></figure><p><strong>不常用但可能会用到的标记</strong></p><h4 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">print(&apos;代码块表示多行代码，使用```来开头和结尾代码块&apos;)</span><br><span class="line">print(&apos;语言标识可选，若有则可自动高亮代码元素&apos;)</span><br><span class="line">```</span><br></pre></td></tr></table></figure><h4 id="2-行内代码"><a href="#2-行内代码" class="headerlink" title="2. 行内代码"></a>2. 行内代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是行内代码 `echo 行内代码嵌入在某一行文本中</span><br></pre></td></tr></table></figure><h4 id="3-一级标题"><a href="#3-一级标题" class="headerlink" title="3. 一级标题"></a>3. 一级标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br></pre></td></tr></table></figure><h4 id="4-五级标题"><a href="#4-五级标题" class="headerlink" title="4. 五级标题"></a>4. 五级标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### 这是五级标题</span><br></pre></td></tr></table></figure><h4 id="5-六级标题"><a href="#5-六级标题" class="headerlink" title="5. 六级标题"></a>5. 六级标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h4 id="6-分割线"><a href="#6-分割线" class="headerlink" title="6. 分割线"></a>6. 分割线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="7-斜体"><a href="#7-斜体" class="headerlink" title="7. 斜体"></a>7. 斜体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是*斜体*</span><br></pre></td></tr></table></figure><h4 id="8-删除线"><a href="#8-删除线" class="headerlink" title="8. 删除线"></a>8. 删除线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是~~删除线~~</span><br></pre></td></tr></table></figure><hr><h3 id="三、图床"><a href="#三、图床" class="headerlink" title="三、图床"></a>三、图床</h3><p>之前介绍了 Markdown 插入图片的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![任意图片名称](https://xx.xx/xx)</span><br></pre></td></tr></table></figure><p>这里演示的链接是网络链接，其实也可以使用本地图片的的文件路径，形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![任意图片名称](C:\Documents\sample.png)</span><br></pre></td></tr></table></figure><h3 id="四、Markdown-标记的典型使用"><a href="#四、Markdown-标记的典型使用" class="headerlink" title="四、Markdown 标记的典型使用"></a>四、Markdown 标记的典型使用</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li>文章的顶层标题使用<strong>二级标题</strong></li><li>每个小节的标题使用<strong>三级标题</strong></li><li>小节中进一步分层组织时使用<strong>四级标题</strong></li><li>尽量少用<strong>五级标题</strong>和<strong>六级标题</strong>，考虑用有序列表和无序列表代替</li><li>完全不用<strong>一级标题</strong></li></ul><h4 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h4><p>需要强调某处内容时使用<strong>粗体</strong>。<br>在中文排版中不使用<strong>斜体</strong>。在英文排版中可用斜体表达强调，或表示书名、题目。</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>以下情况使用引用标记：</p><ul><li>引述内容时（也可直接用引号替代）</li><li>作示例时</li><li>给出提示、警告等额外说明时</li></ul><h4 id="行内代码、代码块"><a href="#行内代码、代码块" class="headerlink" title="行内代码、代码块"></a>行内代码、代码块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="built_in">echo</span> <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>Markdown 中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片名称](https://xx.xx/xx)</span><br></pre></td></tr></table></figure></p><p>来插入图片，这里的「图片名称」可以任取，但是推荐使用对图片主题具有描述性的文字。因为在一些网站或软件中，图片无法加载时会显示这个「图片名称」，这时至少还能给读者传递出一点有用信息。</p><h3 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h3><p>前面总共介绍了 18 种 Markdown 标记，其实常用的也就 10 种左右，这些标记符号都很简单，不出二十分钟便能全部记住。以后在写作的时候请尽量去使用 Markdown，一方面反复的练习会使你牢牢记住各种标记符号，使用时信手拈来；另一方面，Markdown 的使用会大大方便你写作，减少排版带来的负担。请坚信 Markdown 会为你带来生产力的提升。</p><ul><li>学习自<strong>知乎</strong>，<strong>代码之外的自我修养</strong>专栏，作者<strong>黄浮云</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 其他语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function testing</title>
      <link href="/2019-07-27-function-testing.html"/>
      <url>/2019-07-27-function-testing.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  s = <span class="string">"Hello World！"</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> just_for_testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> just_for_testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019-07-26-MyFirstBlog.html"/>
      <url>/2019-07-26-MyFirstBlog.html</url>
      
        <content type="html"><![CDATA[<p>Simulated-Anneal, this is your new start.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
